const TelegramBot = require('node-telegram-bot-api');
const moment = require('moment');
const crypto = require('crypto');
const fs = require("fs");
require('dotenv').config();
const path = require("path");
const { InlineKeyboard } = require('telegram-keyboard');

const botToken = process.env.BOT_TOKEN;
const bot = new TelegramBot(botToken, { polling: true });

const axios = require('axios');
const NodeCache = require('node-cache');

const weatherCache = new NodeCache({ stdTTL: 600 });

const formatTemp = (temp) => `${Math.round(temp)}¬∞C`;

const getWeather = async (city) => {
    const apiKey = 'UR API KEY';
    const cacheKey = `weather_${city.toLowerCase()}`;
    
    const cachedWeather = weatherCache.get(cacheKey);
    if (cachedWeather) {
        return cachedWeather;
    }

    try {
        const response = await axios.get(
            `http://api.weatherapi.com/v1/current.json?key=${apiKey}&q=${encodeURIComponent(city)}&lang=ru`
        );
        
        const data = response.data;
        const weatherData = {
            temp: data.current.temp_c,
            feelsLike: data.current.feelslike_c,
            description: data.current.condition.text,
            humidity: data.current.humidity,
            windSpeed: data.current.wind_kph / 3.6, 
            pressure: data.current.pressure_mb * 0.750062,
            city: data.location.name,
            country: data.location.country,
            timestamp: new Date(data.current.last_updated)
        };
        
        weatherCache.set(cacheKey, weatherData);
        return weatherData;
    } catch (error) {
        if (error.response?.status === 400) {
            throw new Error('–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        }
        throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
};

bot.onText(/^–ë–æ—Ç –ø–æ–≥–æ–¥–∞ (.+)/i, async (msg, match) => {
    const chatId = msg.chat.id;
    const city = match[1].trim();

    try {
        const weather = await getWeather(city);
        
        const response = `
üå§Ô∏è –ü–æ–≥–æ–¥–∞ –≤ ${weather.city}, ${weather.country}:
–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${formatTemp(weather.temp)}
–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: ${formatTemp(weather.feelsLike)}
–û–ø–∏—Å–∞–Ω–∏–µ: ${weather.description}
–í–ª–∞–∂–Ω–æ—Å—Ç—å: ${weather.humidity}%
–í–µ—Ç–µ—Ä: ${weather.windSpeed.toFixed(1)} –º/—Å
–î–∞–≤–ª–µ–Ω–∏–µ: ${Math.round(weather.pressure)} –º–º —Ä—Ç. —Å—Ç.
–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${moment(weather.timestamp).format('HH:mm DD.MM.YYYY')}
        `.trim();

        bot.sendMessage(chatId, response);
    } catch (error) {
        bot.sendMessage(chatId, error.message);
    }
});

bot.onText(/^–ë–æ—Ç –ø–æ–≥–æ–¥–∞$/i, (msg) => {
    bot.sendMessage(msg.chat.id, '–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø–æ—Å–ª–µ "–ë–æ—Ç –ø–æ–≥–æ–¥–∞", –Ω–∞–ø—Ä–∏–º–µ—Ä: "–ë–æ—Ç –ø–æ–≥–æ–¥–∞ –ö–∏–µ–≤"');
});

function loadAdmins() {
    try {
        const data = fs.readFileSync('admins.json', 'utf8');
        return JSON.parse(data);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:', error);
        return [];
    }
}

// Pogoda SVO

const admins = loadAdmins();

const warns = {};
const muted = {};
const banned = {};

function isAdmin(userId) {
    return admins.includes(userId);
}

function generateAccessCode() {
    return crypto.randomBytes(4).toString('hex');
}


function warnUser(username, chatId) {
    warns[username] = (warns[username] || 0) + 1;
    bot.sendMessage(chatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${username} –≤—ã–¥–∞–Ω –≤–∞—Ä–Ω. –í—Å–µ–≥–æ –≤–∞—Ä–Ω–æ–≤: ${warns[username]}`);
    if (warns[username] >= 3) {
        bot.sendMessage(chatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω –∑–∞ 3 –≤–∞—Ä–Ω–∞.`);
        banned[username] = true;
        bot.banChatMember(chatId, username);
    }
}


function unwarnUser(username, chatId) {
    if (warns[username]) {
        warns[username] -= 1;
        bot.sendMessage(chatId, `–í–∞—Ä–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username} –±—ã–ª —Å–Ω—è—Ç. –û—Å—Ç–∞–ª–æ—Å—å –≤–∞—Ä–Ω–æ–≤: ${warns[username]}`);
        if (warns[username] < 3 && banned[username]) {
            banned[username] = false;
            bot.unbanChatMember(chatId, username);
            bot.sendMessage(chatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} –±—ã–ª —Ä–∞–∑–±–∞–Ω–µ–Ω.`);
        }
    } else {
        bot.sendMessage(chatId, `–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username} –Ω–µ—Ç –≤–∞—Ä–Ω–æ–≤.`);
    }
}

function showWarns(chatId) {
    let message = "–°–ø–∏—Å–æ–∫ –≤–∞—Ä–Ω–æ–≤:\n";
    for (const [username, count] of Object.entries(warns)) {
        message += `${username}: ${count}\n`;
    }
    bot.sendMessage(chatId, message || "–ù–µ—Ç –≤–∞—Ä–Ω–æ–≤.");
}

function showMutes(chatId) {
    let message = "–°–ø–∏—Å–æ–∫ –º—É—Ç–æ–≤:\n";
    for (const [userId, until] of Object.entries(muted)) {
        message += `ID ${userId}: –¥–æ ${moment(until).format('LLL')}\n`;
    }
    bot.sendMessage(chatId, message || "–ù–µ—Ç –º—É—Ç–æ–≤.");
}

function showBans(chatId) {
    let message = "–°–ø–∏—Å–æ–∫ –±–∞–Ω–æ–≤:\n";
    for (const [username, until] of Object.entries(banned)) {
        message += `${username}: –¥–æ ${moment(until).format('LLL')}\n`;
    }
    bot.sendMessage(chatId, message || "–ù–µ—Ç –±–∞–Ω–æ–≤.");
}

function muteUser(userId, chatId, durationMoment) {
    const until = moment().add(durationMoment).toDate();
    muted[userId] = until;
    bot.restrictChatMember(chatId, userId, {
        until_date: Math.floor(until.getTime() / 1000),
        can_send_messages: false
    });
    bot.sendMessage(chatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} –±—ã–ª –∑–∞–º—å—é—á–µ–Ω –Ω–∞ ${durationMoment.humanize()}.`);
}

function unmuteUser(userId, chatId) {
    bot.restrictChatMember(chatId, userId, {
        can_send_messages: true
    });
    bot.sendMessage(chatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} –±—ã–ª —Ä–∞–∑–º—å—é—á–µ–Ω.`);
    delete muted[userId];
}

function banUser(userId, chatId, durationMoment) {
    const until = moment().add(durationMoment).toDate();
    banned[userId] = until;
    bot.banChatMember(chatId, userId, {
        until_date: Math.floor(until.getTime() / 1000)
    });
    bot.sendMessage(chatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ ${durationMoment.humanize()}.`);
}

function unbanUser(userId, chatId) {
    bot.unbanChatMember(chatId, userId);
    bot.sendMessage(chatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} –±—ã–ª —Ä–∞–∑–±–∞–Ω–µ–Ω.`);
    delete banned[userId];
}

function tellRandomFact(chatId) {
    const facts = [
        "–û–∫–æ–ª–æ 60% —Ç–µ–ª–∞ —á–µ–ª–æ–≤–µ–∫–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –≤–æ–¥—ã.",
        "–ü—á–µ–ª—ã –º–æ–≥—É—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –ª–∏—Ü–∞.",
        "–í –Ø–ø–æ–Ω–∏–∏ –µ—Å—Ç—å –æ—Å—Ç—Ä–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –∂–∏–≤—É—Ç —Ç–æ–ª—å–∫–æ –∫—Ä–æ–ª–∏–∫–∏.",
        "–°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ç–µ–ª–∞ —á–µ–ª–æ–≤–µ–∫–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 37¬∞C.",
        "–°–æ–±–∞–∫–∏ –º–æ–≥—É—Ç —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å –∑–∞–ø–∞—Ö–∏ –¥–æ 100 000 —Ä–∞–∑ –ª—É—á—à–µ, —á–µ–º –ª—é–¥–∏.",
        "–ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ –≥–ª–∞–∑–∞ –º–æ–≥—É—Ç —Ä–∞–∑–ª–∏—á–∞—Ç—å –æ–∫–æ–ª–æ 10 –º–∏–ª–ª–∏–æ–Ω–æ–≤ —Ü–≤–µ—Ç–æ–≤.",
        "–í 1969 –≥–æ–¥—É —á–µ–ª–æ–≤–µ–∫ –≤–ø–µ—Ä–≤—ã–µ —Å—Ç—É–ø–∏–ª –Ω–∞ –õ—É–Ω—É.",
        "–î–µ–ª—å—Ñ–∏–Ω—ã —Å–ø—è—Ç —Å –æ–¥–Ω–∏–º –æ—Ç–∫—Ä—ã—Ç—ã–º –≥–ª–∞–∑–æ–º.",
        "–ú–æ–ª–Ω–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –≥–æ—Ä—è—á–µ–µ, —á–µ–º –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –°–æ–ª–Ω—Ü–∞.",
        "–°–∞–º—ã–π –¥–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —á–µ–ª–æ–≤–µ–∫ –ø—Ä–æ–≤–µ–ª –±–µ–∑ —Å–Ω–∞, —Å–æ—Å—Ç–∞–≤–∏–ª 11 –¥–Ω–µ–π.",
        "–û—Å—å–º–∏–Ω–æ–≥–∏ –∏–º–µ—é—Ç —Ç—Ä–∏ —Å–µ—Ä–¥—Ü–∞ –∏ –≥–æ–ª—É–±—É—é –∫—Ä–æ–≤—å.",
        "–í –ê–≤—Å—Ç—Ä–∞–ª–∏–∏ –æ–±–∏—Ç–∞–µ—Ç –ø–∏–Ω–≥–≤–∏–Ω, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –∂–∏–≤–µ—Ç –Ω–∞ –ª—å–¥—É, –∞ –Ω–∞ —Å—É—à–µ.",
        "–°–∞–º–∞—è —Å—Ç–∞—Ä–∞—è –∂–∏–≤—É—â–∞—è —Ä—ã–±–∞ - —ç—Ç–æ –∞–∫—É–ª–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –¥–æ–∂–∏—Ç—å –¥–æ 400 –ª–µ—Ç.",
        "–í –ö–∏—Ç–∞–µ –µ—Å—Ç—å –¥–µ—Ä–µ–≤–Ω—è, –≥–¥–µ –≤—Å–µ –∂–∏—Ç–µ–ª–∏ –∂–∏–≤—É—Ç –¥–æ 100 –ª–µ—Ç.",
        "–õ—É–Ω–∞ –æ—Ç–¥–∞–ª—è–µ—Ç—Å—è –æ—Ç –ó–µ–º–ª–∏ –Ω–∞ 3,8 —Å–º –∫–∞–∂–¥—ã–π –≥–æ–¥.",
        "–ñ–∏—Ä–∞—Ñ—ã –º–æ–≥—É—Ç —Å–ø–∞—Ç—å —Ç–æ–ª—å–∫–æ 30 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å.",
        "–ñ–∏–∑–Ω—å –±–∞–Ω–∞–Ω–∞ –¥–ª–∏—Ç—Å—è –æ—Ç 3 –¥–æ 5 –¥–Ω–µ–π –ø–æ—Å–ª–µ –µ–≥–æ –ø–æ–ª–Ω–æ–≥–æ —Å–æ–∑—Ä–µ–≤–∞–Ω–∏—è.",
        "–í –ö–∞–Ω–∞–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ–∑–µ—Ä–æ, –∫–æ—Ç–æ—Ä–æ–µ –º–µ–Ω—è–µ—Ç —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –≥–æ–¥–∞.",
        "–°–ª–æ–Ω ‚Äî –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä—ã–≥–∞—Ç—å.",
        "–ê–ª—å–ø–∏–π—Å–∫–∏–µ –≥–æ—Ä—ã –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç —Ä–∞—Å—Ç–∏ –Ω–∞ 1 —Å–º –≤ –≥–æ–¥.",
        "–°–∞–º–∞—è –¥–ª–∏–Ω–Ω–∞—è —Ä–µ–∫–∞ –≤ –º–∏—Ä–µ ‚Äî —ç—Ç–æ —Ä–µ–∫–∞ –ê–º–∞–∑–æ–Ω–∫–∞.",
        "–ó–µ–±—Ä—ã –∏–º–µ—é—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª–æ—Å–∫–∏, –∫–∞–∫ –æ—Ç–ø–µ—á–∞—Ç–∫–∏ –ø–∞–ª—å—Ü–µ–≤ —É –ª—é–¥–µ–π.",
        "–í –º–∏—Ä–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –±–æ–ª–µ–µ 2 —Ç—ã—Å—è—á —è–∑—ã–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–º–µ—Ä–ª–∏.",
        "–ú–µ–¥—É–∑—ã –Ω–µ –∏–º–µ—é—Ç –º–æ–∑–≥–∞.",
        "–î—Ä–µ–≤–Ω–∏–µ –µ–≥–∏–ø—Ç—è–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –∫–æ—Å–º–µ—Ç–∏–∫—É –Ω–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã, –Ω–æ –∏ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–æ–ª–Ω—Ü–∞.",
        "–ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ –Ω–æ–≥—Ç–∏ —Ä–∞—Å—Ç—É—Ç –±—ã—Å—Ç—Ä–µ–µ, —á–µ–º –≤–æ–ª–æ—Å—ã.",
        "–Ø–±–ª–æ–∫–∏ –Ω–∞ 25% —Å–æ—Å—Ç–æ—è—Ç –∏–∑ –≤–æ–∑–¥—É—Ö–∞, –ø–æ—ç—Ç–æ–º—É –æ–Ω–∏ –º–æ–≥—É—Ç –ø–ª–∞–≤–∞—Ç—å.",
        "–¢–æ–ª—å–∫–æ 2% –æ–∫–µ–∞–Ω–æ–≤ –±—ã–ª–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω—ã —á–µ–ª–æ–≤–µ–∫–æ–º.",
        "–ù–∞ –ó–µ–º–ª–µ –µ—Å—Ç—å –º–µ—Å—Ç–æ, –≥–¥–µ –Ω–µ –ø–∞–¥–∞–µ—Ç –¥–æ–∂–¥—å –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–µ—Å—è—Ç–∏–ª–µ—Ç–∏–π.",
        "–°–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –∂–∏–≤–æ–µ —Å—É—â–µ—Å—Ç–≤–æ –Ω–∞ –ó–µ–º–ª–µ ‚Äî –≥—Ä–∏–± –≤ –û—Ä–µ–≥–æ–Ω–µ.",
        "–£ —Å—Ç—Ä–∞—É—Å–æ–≤ —Å–∞–º—ã–µ –±–æ–ª—å—à–∏–µ –≥–ª–∞–∑–∞ —Å—Ä–µ–¥–∏ –Ω–∞–∑–µ–º–Ω—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö.",
        "–¢–∞–º, –≥–¥–µ —Ä–∞—Å—Ç—É—Ç –∫–∞–∫—Ç—É—Å—ã, –æ—Å–∞–¥–∫–∏ –º–æ–≥—É—Ç –Ω–µ –≤—ã–ø–∞–¥–∞—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ª–µ—Ç."
    ];
    const randomFact = facts[Math.floor(Math.random() * facts.length)];
    bot.sendMessage(chatId, randomFact);
}

bot.onText(/\/fact/, (msg) => {
    tellRandomFact(msg.chat.id);
});

function tellQuote(chatId) {
    const quotes = [
        "¬´–ë—É–¥—å —Å–æ–±–æ–π, –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏ —É–∂–µ –∑–∞–Ω—è—Ç—ã.¬ª ‚Äî –û—Å–∫–∞—Ä –£–∞–π–ª—å–¥",
        "¬´–ù–µ –≤–∞–∂–Ω–æ, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —Ç—ã —É–ø–∞–ª, –≤–∞–∂–Ω–æ, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —Ç—ã –ø–æ–¥–Ω—è–ª—Å—è.¬ª ‚Äî –ú—ç—Ä–∏–ª–∏–Ω –ú–æ–Ω—Ä–æ",
        "¬´–ñ–∏–∑–Ω—å –Ω–µ –≤ —Ç–æ–º, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–µ–±—è. –ñ–∏–∑–Ω—å –≤ —Ç–æ–º, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å–µ–±—è.¬ª ‚Äî –î–∂–æ—Ä–¥–∂ –ë–µ—Ä–Ω–∞—Ä–¥ –®–æ—É",
        "¬´–Ø –Ω–µ —Ö–æ—á—É, —á—Ç–æ–±—ã Linux –±—ã–ª –ø—Ä–æ—Å—Ç—ã–º. –Ø —Ö–æ—á—É, —á—Ç–æ–±—ã –æ–Ω –±—ã–ª –º–æ—â–Ω—ã–º.¬ª ‚Äî –õ–∏–Ω—É—Å –¢–æ—Ä–≤–∞–ª—å–¥—Å",
        "¬´Linux ‚Äî —ç—Ç–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –¥—É–º–∞—Ç—å.¬ª ‚Äî –õ–∏–Ω—É—Å –¢–æ—Ä–≤–∞–ª—å–¥—Å",
        "¬´–°–≤–æ–±–æ–¥–∞ –Ω–µ –æ–∑–Ω–∞—á–∞–µ—Ç —Å–≤–æ–±–æ–¥—É –æ—Ç —Ä–∞–±–æ—Ç—ã, —Å–≤–æ–±–æ–¥–∞ ‚Äî —ç—Ç–æ —Å–≤–æ–±–æ–¥–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.¬ª ‚Äî –†–∏—á–∞—Ä–¥ –°—Ç–æ–ª–ª–º–∞–Ω",
        "¬´–Ø –Ω–µ —Å—á–∏—Ç–∞—é, —á—Ç–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–∫—Ä—ã—Ç—ã–º–∏. –ú—ã –¥–æ–ª–∂–Ω—ã –¥–µ–ª–∏—Ç—å—Å—è –∏–º–∏, —á—Ç–æ–±—ã –ª—é–¥–∏ –º–æ–≥–ª–∏ –∏–∑—É—á–∞—Ç—å –∏ —É–ª—É—á—à–∞—Ç—å –∏—Ö.¬ª ‚Äî –†–∏—á–∞—Ä–¥ –°—Ç–æ–ª–ª–º–∞–Ω",
        "¬´Linux ‚Äî —ç—Ç–æ –Ω–µ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç, —á—Ç–æ–±—ã –≤—Å–µ –±—ã–ª–æ –ø—Ä–æ—Å—Ç–æ. –≠—Ç–æ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç, —á—Ç–æ–±—ã –≤—Å–µ —Ä–∞–±–æ—Ç–∞–ª–æ, –∫–∞–∫ –Ω—É–∂–Ω–æ.¬ª ‚Äî –õ–∏–Ω—É—Å –¢–æ—Ä–≤–∞–ª—å–¥—Å",
        "¬´Linux ‚Äî —é–∑–µ—Ä —Ñ—Ä–µ–Ω–¥–ª–∏, –Ω–æ –Ω–µ –¥–æ–ª–±–æ–µ–± —Ñ—Ä–µ–Ω–¥–ª–∏¬ª ‚Äî –õ–∏–Ω—É—Å –¢–æ—Ä–≤–∞–ª—å–¥—Å",
        "¬´–°–≤–æ–±–æ–¥–∞ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –∞–±—Å—Ç—Ä–∞–∫—Ü–∏—è, —ç—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ.¬ª ‚Äî –†–∏—á–∞—Ä–¥ –°—Ç–æ–ª–ª–º–∞–Ω",
        "¬´–Ø –≤—Å–µ–≥–¥–∞ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–ª Linux. –û–Ω –±—ã—Å—Ç—Ä–µ–µ, –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ –∏ –ø—Ä–æ—Å—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç.¬ª ‚Äî –õ–∏–Ω—É—Å –¢–æ—Ä–≤–∞–ª—å–¥—Å",
        "¬´–ï—Å–ª–∏ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–Ω—è—Ç—å –∫–æ–¥, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–Ω—è—Ç—å, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∞.¬ª ‚Äî –†–∏—á–∞—Ä–¥ –°—Ç–æ–ª–ª–º–∞–Ω"
    ];
    const randomQuote = quotes[Math.floor(Math.random() * quotes.length)];
    bot.sendMessage(chatId, randomQuote);
}

bot.onText(/\/quote/, (msg) => {
    tellQuote(msg.chat.id);
});

function daysUntilNewYear(chatId) {
    const now = moment();
    const nextYear = moment().year() + 1;
    const newYear = moment(`${nextYear}-01-01`);
    const daysLeft = newYear.diff(now, 'days');
    bot.sendMessage(chatId, `–î–æ –Ω–æ–≤–æ–≥–æ –≥–æ–¥–∞ –æ—Å—Ç–∞–ª–æ—Å—å ${daysLeft} –¥–Ω–µ–π.`);
}

bot.onText(/\/newyear/, (msg) => {
    daysUntilNewYear(msg.chat.id);
});

// fetch
const { exec } = require("child_process");

bot.onText(/\/fetch(?:\s*(-neofetch))?/, (msg, match) => {
  const chatId = msg.chat.id;
  const command = match[1] ? "neofetch --stdout" : "cat /etc/os-release";

  exec(command, (error, stdout, stderr) => {
    if (error) {
      bot.sendMessage(chatId, `–û—à–∏–±–∫–∞: ${error.message}`);
      return;
    }
    if (stderr) {
      bot.sendMessage(chatId, `–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${stderr}`);
      return;
    }
    bot.sendMessage(chatId, stdout);
  });
});

// GB

bot.onText(/\/gb/, async (msg) => {
  const chatId = msg.chat.id;
  const replyTo = msg.reply_to_message;

  if (!replyTo) {
    bot.sendMessage(chatId, "‚õî –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è!");
    return;
  }

  const admins = await bot.getChatAdministrators(chatId);
  const isAdmin = admins.some(admin => admin.user.id === msg.from.id);

  if (!isAdmin) {
    bot.sendMessage(chatId, "üö´ –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –±–∞–Ω!");
    return;
  }

  const targetUser = replyTo.from;
  const mention = `@${targetUser.username || targetUser.first_name}`;
  const pollMessage = `‚öñÔ∏è –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ: –ó–∞–±–∞–Ω–∏—Ç—å ${mention}?\n‚è≥ –í—Ä–µ–º—è: 5 –º–∏–Ω—É—Ç`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: "‚úÖ –ó–∞", callback_data: `ban_yes_${targetUser.id}` },
        { text: "‚ùå –ü—Ä–æ—Ç–∏–≤", callback_data: `ban_no_${targetUser.id}` }
      ]
    ]
  };

  bot.sendMessage(chatId, pollMessage, {
    reply_to_message_id: replyTo.message_id,
    reply_markup: keyboard
  });

  const votes = { yes: 0, no: 0, voters: new Set() };
  const timeout = setTimeout(async () => {
    const result = votes.yes > votes.no 
      ? `üî® ${mention} –±—É–¥–µ—Ç –∑–∞–±–∞–Ω–µ–Ω! (–ó–∞: ${votes.yes}, –ü—Ä–æ—Ç–∏–≤: ${votes.no})`
      : `üïäÔ∏è ${mention} –æ—Å—Ç–∞—ë—Ç—Å—è! (–ó–∞: ${votes.yes}, –ü—Ä–æ—Ç–∏–≤: ${votes.no})`;
    
    bot.sendMessage(chatId, result);
    if (votes.yes > votes.no) {
      await bot.banChatMember(chatId, targetUser.id);
    }
  }, 5 * 60 * 1000);

  bot.on('callback_query', (query) => {
    const voterId = query.from.id;
    const [action, userId] = query.data.split('_').slice(1);

    if (parseInt(userId) !== targetUser.id || votes.voters.has(voterId)) {
      bot.answerCallbackQuery(query.id, { text: "–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∏–ª–∏ —ç—Ç–æ –Ω–µ —Ç–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ!" });
      return;
    }

    votes.voters.add(voterId);
    if (action === 'yes') votes.yes++;
    else votes.no++;

    bot.answerCallbackQuery(query.id, { text: `–í—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ ${action === 'yes' ? '–ó–∞' : '–ü—Ä–æ—Ç–∏–≤'}!` });
  });
});

// GB SVO

bot.onText(/\/rate (.+)/, (msg, match) => {
  const chatId = msg.chat.id;
  const item = match[1];
  const rating = Math.floor(Math.random() * 11);
  bot.sendMessage(chatId, `‚≠ê –Ø –æ—Ü–µ–Ω–∏–≤–∞—é "${item}" –Ω–∞ ${rating}/10!`);
});

// RPS

const games = new Map(); 

bot.onText(/\/rps/, async (msg) => {
  const chatId = msg.chat.id;
  const initiatorId = msg.from.id;
  const replyTo = msg.reply_to_message;

  if (!replyTo) {
    bot.sendMessage(chatId, "‚õî –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –µ–≥–æ –≤ –∏–≥—Ä—É!");
    return;
  }

  const opponentId = replyTo.from.id;
  if (initiatorId === opponentId) {
    bot.sendMessage(chatId, "üòÇ –ù–µ–ª—å–∑—è –∏–≥—Ä–∞—Ç—å —Å —Å–∞–º–∏–º —Å–æ–±–æ–π!");
    return;
  }

  if (games.has(chatId)) {
    bot.sendMessage(chatId, "‚è≥ –í —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –∏–¥—ë—Ç –∏–≥—Ä–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ!");
    return;
  }

  const initiatorName = msg.from.first_name || '–ò–≥—Ä–æ–∫ 1';
  const opponentName = replyTo.from.first_name || '–ò–≥—Ä–æ–∫ 2';
  const game = {
    initiator: { id: initiatorId, name: initiatorName, choice: null },
    opponent: { id: opponentId, name: opponentName, choice: null },
    round: 1,
    score: { initiator: 0, opponent: 0 }
  };
  games.set(chatId, game);

  const keyboard = {
    inline_keyboard: [
      [
        { text: "‚úÖ –î–∞", callback_data: `rps_${chatId}_accept` },
        { text: "‚ùå –ù–µ—Ç", callback_data: `rps_${chatId}_decline` }
      ]
    ]
  };

  bot.sendMessage(chatId, `üéÆ ${initiatorName} –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç ${opponentName} —Å—ã–≥—Ä–∞—Ç—å –≤ –ö–∞–º–µ–Ω—å-–ù–æ–∂–Ω–∏—Ü—ã-–ë—É–º–∞–≥–∞!\n${opponentName}, —Å–æ–≥–ª–∞—Å–Ω—ã?`, {
    reply_to_message_id: replyTo.message_id,
    reply_markup: keyboard
  });
});

bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  const userId = query.from.id;
  const [prefix, gameChatId, action] = query.data.split('_');

  if (prefix !== 'rps' || parseInt(gameChatId) !== chatId) return;
  if (!games.has(chatId)) {
    bot.answerCallbackQuery(query.id, { text: "–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!" });
    return;
  }

  const game = games.get(chatId);
  const choiceMap = { rock: "‚úä –ö–∞–º–µ–Ω—å", scissors: "‚úÇÔ∏è –ù–æ–∂–Ω–∏—Ü—ã", paper: "üìú –ë—É–º–∞–≥–∞" };
  const winConditions = { rock: "scissors", scissors: "paper", paper: "rock" };

  if (action === 'accept' || action === 'decline') {
    if (userId !== game.opponent.id) {
      bot.answerCallbackQuery(query.id, { text: "–≠—Ç–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –¥–ª—è –≤–∞—Å!" });
      return;
    }

    if (action === 'decline') {
      bot.editMessageText(`üö´ ${game.opponent.name} –æ—Ç–∫–∞–∑–∞–ª—Å—è –∏–≥—Ä–∞—Ç—å —Å ${game.initiator.name}!`, {
        chat_id: chatId,
        message_id: query.message.message_id
      });
      games.delete(chatId);
      bot.answerCallbackQuery(query.id, { text: "–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –∏–≥—Ä—ã!" });
      return;
    }

    const keyboard = {
      inline_keyboard: [
        [
          { text: "‚úä –ö–∞–º–µ–Ω—å", callback_data: `rps_${chatId}_rock` },
          { text: "‚úÇÔ∏è –ù–æ–∂–Ω–∏—Ü—ã", callback_data: `rps_${chatId}_scissors` },
          { text: "üìú –ë—É–º–∞–≥–∞", callback_data: `rps_${chatId}_paper` }
        ]
      ]
    };

    bot.editMessageText(
      `üéÆ –†–∞—É–Ω–¥ ${game.round}\n${game.initiator.name} vs ${game.opponent.name}\n–°—á—ë—Ç: ${game.score.initiator} - ${game.score.opponent}\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —Ö–æ–¥ (—Ç–∞–π–Ω–æ):`,
      {
        chat_id: chatId,
        message_id: query.message.message_id,
        reply_markup: keyboard
      }
    );
    bot.answerCallbackQuery(query.id, { text: "–í—ã –ø—Ä–∏–Ω—è–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ! –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ–¥." });
    return;
  }

  if (["rock", "scissors", "paper"].includes(action)) {
    if (userId !== game.initiator.id && userId !== game.opponent.id) {
      bot.answerCallbackQuery(query.id, { text: "–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ!" });
      return;
    }

    const player = userId === game.initiator.id ? game.initiator : game.opponent;
    if (player.choice) {
      bot.answerCallbackQuery(query.id, { text: "–í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ –≤—ã–±–æ—Ä!" });
      return;
    }

    player.choice = action;
    bot.answerCallbackQuery(query.id, { text: `–í—ã –≤—ã–±—Ä–∞–ª–∏: ${choiceMap[action]}` });

    if (game.initiator.choice && game.opponent.choice) {
      const initChoice = game.initiator.choice;
      const oppChoice = game.opponent.choice;
      let result;

      if (initChoice === oppChoice) {
        result = "ü§ù –ù–∏—á—å—è!";
      } else if (winConditions[initChoice] === oppChoice) {
        result = `üèÜ ${game.initiator.name} –ø–æ–±–µ–¥–∏–ª!`;
        game.score.initiator++;
      } else {
        result = `üèÜ ${game.opponent.name} –ø–æ–±–µ–¥–∏–ª!`;
        game.score.opponent++;
      }

      game.round++;
      game.initiator.choice = null;
      game.opponent.choice = null;

      const keyboard = {
        inline_keyboard: [
          [
            { text: "‚úä –ö–∞–º–µ–Ω—å", callback_data: `rps_${chatId}_rock` },
            { text: "‚úÇÔ∏è –ù–æ–∂–Ω–∏—Ü—ã", callback_data: `rps_${chatId}_scissors` },
            { text: "üìú –ë—É–º–∞–≥–∞", callback_data: `rps_${chatId}_paper` }
          ],
          [
            { text: "üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É", callback_data: `rps_${chatId}_end` }
          ]
        ]
      };

      bot.editMessageText(
        `üéÆ –†–∞—É–Ω–¥ ${game.round - 1}\n${game.initiator.name}: ${choiceMap[initChoice]}\n${game.opponent.name}: ${choiceMap[oppChoice]}\n${result}\n\n–°—á—ë—Ç: ${game.score.initiator} - ${game.score.opponent}\n–†–∞—É–Ω–¥ ${game.round}\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥:`,
        {
          chat_id: chatId,
          message_id: query.message.message_id,
          reply_markup: keyboard
        }
      );
    }
    return;
  }

  if (action === 'end') {
    const finalResult = game.score.initiator > game.score.opponent
      ? `üéâ ${game.initiator.name} –≤—ã–∏–≥—Ä–∞–ª –º–∞—Ç—á!`
      : game.score.initiator < game.score.opponent
      ? `üéâ ${game.opponent.name} –≤—ã–∏–≥—Ä–∞–ª –º–∞—Ç—á!`
      : "üé≤ –ù–∏—á—å—è –≤ –º–∞—Ç—á–µ!";

    bot.editMessageText(
      `üèÅ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n${game.initiator.name}: ${game.score.initiator}\n${game.opponent.name}: ${game.score.opponent}\n${finalResult}`,
      {
        chat_id: chatId,
        message_id: query.message.message_id
      }
    );
    games.delete(chatId);
    bot.answerCallbackQuery(query.id, { text: "–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!" });
  }
});

// RPS SVO

const QRCode = require('qrcode');

bot.onText(/\/qr (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const text = match[1];
  try {
    const qrImage = await QRCode.toBuffer(text);
    bot.sendPhoto(chatId, qrImage, { caption: `üì∑ QR` });
  } catch (error) {
    bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ QR-–∫–æ–¥–∞!");
  }
});

bot.onText(/\/wish (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const wish = match[1];
  const msgWish = await bot.sendMessage(chatId, `üåü ${wish}... –ó–∞–≥–∞–¥—ã–≤–∞—é!`);
  await new Promise(r => setTimeout(r, 1000));
  await bot.editMessageText(`‚ú® –ò—Å–ø–æ–ª–Ω—è—é: ${wish}!`, { chat_id: chatId, message_id: msgWish.message_id });
  await new Promise(r => setTimeout(r, 1000));
  bot.editMessageText(`üéâ ${wish} –∏—Å–ø–æ–ª–Ω–µ–Ω–æ !`, { chat_id: chatId, message_id: msgWish.message_id });
});

const symbols = ['üçí', 'üçã', 'üçä', 'üíé', 'üîî', '7Ô∏è‚É£'];

bot.onText(/\/slot/, async (msg) => {
  const chatId = msg.chat.id;
  const player = msg.from.first_name;
  const spin = () => symbols[Math.floor(Math.random() * symbols.length)];
  let result = [spin(), spin(), spin()];
  const slotMsg = await bot.sendMessage(chatId, `üé∞ ${player} –∫—Ä—É—Ç–∏—Ç —Å–ª–æ—Ç...\n${result.join(' ')}`);
  
  for (let i = 0; i < 3; i++) {
    await new Promise(r => setTimeout(r, 500));
    result = [spin(), spin(), spin()];
    await bot.editMessageText(`üé∞ ${player} –∫—Ä—É—Ç–∏—Ç —Å–ª–æ—Ç...\n${result.join(' ')}`, { chat_id: chatId, message_id: slotMsg.message_id });
  }

  const win = result[0] === result[1] && result[1] === result[2];
  bot.editMessageText(
    win ? `üé∞ –î–∂–µ–∫–ø–æ—Ç! ${player} –≤—ã–∏–≥—Ä–∞–ª —Å ${result.join(' ')}!` : `üé∞ ${player}, –Ω–µ –ø–æ–≤–µ–∑–ª–æ: ${result.join(' ')}`,
    { chat_id: chatId, message_id: slotMsg.message_id }
  );
});

bot.onText(/\/bomb/, async (msg) => {
  const chatId = msg.chat.id;
  const player = msg.from.first_name;
  const correctWire = Math.floor(Math.random() * 3);
  const wires = ['üî¥ –ö—Ä–∞—Å–Ω—ã–π', 'üü¢ –ó–µ–ª—ë–Ω—ã–π', 'üîµ –°–∏–Ω–∏–π'];

  const keyboard = {
    inline_keyboard: wires.map((w, i) => [{ text: w, callback_data: `bomb_${chatId}_${i}` }])
  };

  const bombMsg = await bot.sendMessage(chatId, `üí£ ${player}, —É —Ç–µ–±—è 10 —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã —Ä–∞–∑–º–∏–Ω–∏—Ä–æ–≤–∞—Ç—å –±–æ–º–±—É!\n–í—ã–±–µ—Ä–∏ –ø—Ä–æ–≤–æ–¥:`, { reply_markup: keyboard });
  let timeLeft = 10;

  const timer = setInterval(async () => {
    timeLeft--;
    if (timeLeft > 0) {
      await bot.editMessageText(`üí£ ${player}, –æ—Å—Ç–∞–ª–æ—Å—å ${timeLeft} —Å–µ–∫!\n–í—ã–±–µ—Ä–∏ –ø—Ä–æ–≤–æ–¥:`, { chat_id: chatId, message_id: bombMsg.message_id, reply_markup: keyboard });
    }
  }, 1000);

  bot.on('callback_query', async (query) => {
    const [_, cId, wire] = query.data.split('_');
    if (parseInt(cId) !== chatId) return;

    clearInterval(timer);
    if (parseInt(wire) === correctWire) {
      await bot.editMessageText(`üéâ ${player} —Ä–∞–∑–º–∏–Ω–∏—Ä–æ–≤–∞–ª –±–æ–º–±—É! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–æ–≤–æ–¥: ${wires[correctWire]}`, { chat_id: chatId, message_id: bombMsg.message_id });
    } else {
      await bot.editMessageText(`üí• –ë–£–ú! ${player}, —Ç—ã –≤—ã–±—Ä–∞–ª ${wires[wire]}, –∞ –Ω–∞–¥–æ –±—ã–ª–æ ${wires[correctWire]}!`, { chat_id: chatId, message_id: bombMsg.message_id });
    }
    bot.answerCallbackQuery(query.id);
  });

  setTimeout(() => {
    if (timeLeft > 0) return;
    clearInterval(timer);
    bot.editMessageText(`üí• –í–†–ï–ú–Ø –í–´–®–õ–û! ${player}, –±–æ–º–±–∞ –≤–∑–æ—Ä–≤–∞–ª–∞—Å—å!`, { chat_id: chatId, message_id: bombMsg.message_id });
  }, 10000);
});

bot.onText(/\/duel/, async (msg) => {
  const chatId = msg.chat.id;
  const replyTo = msg.reply_to_message;
  if (!replyTo) {
    bot.sendMessage(chatId, "‚õî –û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞!");
    return;
  }

  const p1 = msg.from.first_name;
  const p2 = replyTo.from.first_name;
  const p1Id = msg.from.id;
  const p2Id = replyTo.from.id;

  const keyboard = {
    inline_keyboard: [[{ text: "ü§† –ì–æ—Ç–æ–≤", callback_data: `duel_${chatId}_${p1Id}_${p2Id}_ready` }]]
  };

  const duelMsg = await bot.sendMessage(chatId, `‚öîÔ∏è ${p1} –≤—ã–∑—ã–≤–∞–µ—Ç ${p2} –Ω–∞ –¥—É—ç–ª—å!\n${p2}, –≥–æ—Ç–æ–≤?`, { reply_markup: keyboard });

  let ready = false;
  bot.on('callback_query', async (query) => {
    const [_, cId, p1IdQ, p2IdQ, action] = query.data.split('_');
    if (parseInt(cId) !== chatId || action !== 'ready' || parseInt(p2IdQ) !== query.from.id) return;

    if (!ready) {
      ready = true;
      await bot.editMessageText(`‚öîÔ∏è ${p2} –≥–æ—Ç–æ–≤! –ñ–¥–∏—Ç–µ —Å–∏–≥–Ω–∞–ª–∞...`, { chat_id: chatId, message_id: duelMsg.message_id });
      const wait = Math.floor(Math.random() * 5000) + 2000;
      setTimeout(async () => {
        const shootKeyboard = {
          inline_keyboard: [[{ text: "üî´ –í—ã—Å—Ç—Ä–µ–ª–∏—Ç—å!", callback_data: `duel_${chatId}_${p1Id}_${p2Id}_shoot` }]]
        };
        await bot.editMessageText(`üî• –°–ï–ô–ß–ê–°!`, { chat_id: chatId, message_id: duelMsg.message_id, reply_markup: shootKeyboard });

        let winner = null;
        bot.on('callback_query', async (q) => {
          if (q.data !== `duel_${chatId}_${p1Id}_${p2Id}_shoot` || winner) return;
          winner = q.from.id === p1Id ? p1 : p2;
          await bot.editMessageText(`üèÜ ${winner} –≤—ã—Å—Ç—Ä–µ–ª–∏–ª –ø–µ—Ä–≤—ã–º –∏ –ø–æ–±–µ–¥–∏–ª!`, { chat_id: chatId, message_id: duelMsg.message_id });
          bot.answerCallbackQuery(q.id, { text: "–¢—ã –ø–æ–±–µ–¥–∏–ª!" });
        });
      }, wait);
    }
  });
});

bot.onText(/\/reminder (\d+)(m|h|d) (.+)/, (msg, match) => {
    const duration = parseInt(match[1]);
    const unit = match[2];
    const reminderText = match[3];
    const durationMoment = moment.duration(duration, unit);

    bot.sendMessage(msg.chat.id, `–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${reminderText}`);

    setTimeout(() => {
        bot.sendMessage(msg.chat.id, `‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞—é: ${reminderText}`);
    }, durationMoment.asMilliseconds());
});

function tellJoke(chatId) {
    const jokes = [
        "–ú—É—Å–∏-–ø—É—Å–∏ –ª–∏–Ω—É–∫—Å-—Å—É—Å–µ –¥–∂–∞–≥–∞-–¥–∂–∞–≥–∞, –≤–∏–Ω–¥–æ—É—Å ‚Äî —à–Ω—è–≥–∞.",
        "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–≥—Ä—ã –∑–∞–ø—É—Å–∫–∞—Ç—å –Ω–∞ –õ–∏–Ω—É–∫—Å–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ, —á–µ–º –∏–≥—Ä–∞—Ç—å –≤ –Ω–∏—Ö.",
        "–ë–∏–ª–ª –ì–µ–π—Ç—Å –∑–∞—Å—Ç—É–∫–∞–ª –∂–µ–Ω—É —Å –õ–∏–Ω—É–∫—Å–æ–º.",
        "–Ø –ø–æ–Ω—è–ª, —á–µ–º –õ–∏–Ω—É–∫—Å –æ—Ç –í–∏–Ω–¥—ã –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è! –í –Ω—ë–º –º–æ–∂–Ω–æ –±–∏—Ç—å—Å—è –≥–æ–ª–æ–≤–æ–π –æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –∏ —É —Ç–µ–±—è –Ω–µ –æ—Ç–∫—Ä–æ—é—Ç—Å—è –¥–µ—Å—è—Ç–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –≤–∏–¥–∏—à—å –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –≤ –∂–∏–∑–Ω–∏!",
        "–ì–ª–∞–≤–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ª—é–±–æ–≥–æ –ª–∏–Ω—É–∫—Å–æ–∏–¥–∞ ‚Äî —ç—Ç–æ –æ–≥—Ä–æ–º–Ω—ã–π, –º–æ–∑–æ–ª–∏—Å—Ç—ã–π –º–æ–∑–≥.",
        "–£ —Å–ª–æ–≤—ñ –µ–±—ñ–ª–¥ –±—É–∫–≤–∞ –¥ —è–≤–Ω–æ –Ω–µ –Ω–∞ —Å–≤–æ—î–º—É –º—ñ—Å—Ü—ñ.",
        "–°—ã–Ω –ø–æ–¥—Ö–æ–¥–∏—Ç —Å —Ñ–ª–µ—à–∫–æ–π –∫ –ø–∞–ø–µ-–ª–∏–Ω—É–∫—Å–æ–∏–¥—É –∏ –≥–æ–≤–æ—Ä–∏—Ç:\n‚Äì –ü–∞–ø, –∞ –ø—Ä–æ–∏–≥—Ä–∞–π-–∫–∞ –º–Ω–µ —ç—Ç–æ—Ç .wav-–∏–∫‚Ä¶\n‚Äì –©–∞, —Å—ã–Ω–æ–∫, —Ç–æ–ª—å–∫–æ –≤ —è–¥—Ä–æ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å–∞—É–Ω–¥–∞ –≤–∫–æ–º–ø–∏–ª—é‚Ä¶",
        "¬´Linux. –ö–∞—Ä–º–∞–Ω–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ (–æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã)¬ª ‚Äî 4409 —Å—Ç—Ä–∞–Ω–∏—Ü.",
        "–û–±—ä—è–≤–ª–µ–Ω–æ –æ–± –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ Microsoft –∏ Linux. –≠–º–±–ª–µ–º–æ–π –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –≤—ã–±—Ä–∞–Ω –ø–∏–Ω–≥–≤–∏–Ω, –≤—ã–ø–∞–¥–∞—é—â–∏–π –≤ –æ–∫–Ω–æ.",
        "sudo apt-search girl | grep beautiful",
        "–õ–∏–Ω—É–∫—Å —Å–æ–∑–¥–∞–Ω –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞, –∫–∞–∫ –ø—Ç–∏—Ü–∞ –ø–∏–Ω–≥–≤–∏–Ω ‚Äî –¥–ª—è –ø–æ–ª—ë—Ç–∞.",
        "- –ü—Ä–∞–≤–¥–∞ –ª–∏, —á—Ç–æ –≤ –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–µ Linux –µ—Å—Ç—å —Ñ—Ä–∞–∑–∞ '–ø—Ä–∏ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–∏ —ç—Ç–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∏ –æ–¥–∏–Ω –ø–∏–Ω–≥–≤–∏–Ω –Ω–µ –ø–æ—Å—Ç—Ä–∞–¥–∞–ª?'\n- –ü—Ä–∞–≤–¥–∞. –ó–∞—Ç–æ –ø—Ä–∏ –µ–≥–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–æ—Å—Ç—Ä–∞–¥–∞–ª–æ –º–Ω–æ–≥–æ –¥—è—Ç–ª–æ–≤.",
        "–°–∫–æ–ª—å–∫–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –ø–æ–º–µ–Ω—è—Ç—å –ª–∞–º–ø–æ—á–∫—É? –ù–∏ –æ–¥–Ω–æ–≥–æ, —ç—Ç–æ –∞–ø–ø–∞—Ä–∞—Ç–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞.",
        "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –ø—É—Ç–∞—é—Ç –†–æ–∂–¥–µ—Å—Ç–≤–æ –∏ –•—ç–ª–ª–æ—É–∏–Ω? –ü–æ—Ç–æ–º—É —á—Ç–æ 31 –æ–∫—Ç—è–±—Ä—è ‚Äî —ç—Ç–æ 25 –¥–µ–∫–∞–±—Ä—è –≤ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ.",
        "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç ‚Äî —ç—Ç–æ –º–∞—à–∏–Ω–∞, –ø—Ä–µ–æ–±—Ä–∞–∑—É—é—â–∞—è –∫–æ—Ñ–µ –≤ –∫–æ–¥.",
        "–ï—Å–ª–∏ –±—ã —Å—Ç—Ä–æ–∏—Ç–µ–ª–∏ —Å—Ç—Ä–æ–∏–ª–∏ –¥–æ–º–∞ —Ç–∞–∫, –∫–∞–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –ø–∏—à—É—Ç –∫–æ–¥, –ø–µ—Ä–≤—ã–π –∂–µ –¥—è—Ç–µ–ª —Ä–∞–∑—Ä—É—à–∏–ª –±—ã —Ü–∏–≤–∏–ª–∏–∑–∞—Ü–∏—é.",
        "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç ‚Äî —ç—Ç–æ —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É, –æ –∫–æ—Ç–æ—Ä–æ–π –≤—ã –Ω–µ –∑–Ω–∞–ª–∏, —Å–ø–æ—Å–æ–±–æ–º, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç–µ.",
        "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –Ω–µ –ª—é–±—è—Ç –ø—Ä–∏—Ä–æ–¥—É? –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –±–∞–≥–æ–≤.",
        "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é—Ç —Ç—ë–º–Ω—É—é —Ç–µ–º—É? –ü–æ—Ç–æ–º—É —á—Ç–æ —Å–≤–µ—Ç –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç –±–∞–≥–æ–≤.",
        "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤ –º–æ–∂–Ω–æ —Å—Ä–∞–≤–Ω–∏—Ç—å —Å –±–æ–≥–∞–º–∏: –æ–Ω–∏ —Å–æ–∑–¥–∞—é—Ç —Å–≤–æ–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–∏—Ä—ã, –Ω–æ –ø–æ—Ç–æ–º –Ω–µ –∑–Ω–∞—é—Ç, –∫–∞–∫ –∏—Ö –∏—Å–ø—Ä–∞–≤–∏—Ç—å.",
        "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç ‚Äî —ç—Ç–æ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –ø–æ–ø—Ä–æ—Å–∏—Ç—å —É —à–µ—Ñ–∞ 200$ –Ω–∞ –ø–∞–º—è—Ç—å.",
        "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –≤—Å–µ–≥–¥–∞ —Å–º–æ—Ç—Ä–∏—Ç –∏ –Ω–∞–ø—Ä–∞–≤–æ, –∏ –Ω–∞–ª–µ–≤–æ, –ø—Ä–µ–∂–¥–µ —á–µ–º –ø–µ—Ä–µ–π—Ç–∏ —É–ª–∏—Ü—É —Å –æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–º –¥–≤–∏–∂–µ–Ω–∏–µ–º.",
        "–ù–µ –≤–æ–ª–Ω—É–π—Å—è, –µ—Å–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ï—Å–ª–∏ –±—ã –≤—Å—ë –≤—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–ª–æ, —É —Ç–µ–±—è –±—ã –Ω–µ –±—ã–ª–æ —Ä–∞–±–æ—Ç—ã.",
        "–ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è –ø–æ—Ö–æ–∂–µ –Ω–∞ –µ–≥–∏–ø–µ—Ç—Å–∫–∏–µ –ø–∏—Ä–∞–º–∏–¥—ã: –º–∏–ª–ª–∏–æ–Ω—ã –∫–∏—Ä–ø–∏—á–µ–π, –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –±–µ–∑ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –Ω–æ –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–æ–º –≥—Ä—É–±–æ–π —Å–∏–ª—ã —Ç—ã—Å—è—á —Ä–∞–±–æ–≤.",
        "–í—Å–µ–≥–¥–∞ –ø–∏—à–∏ –∫–æ–¥ —Ç–∞–∫, –∫–∞–∫ –±—É–¥—Ç–æ —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –µ–≥–æ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—Ç—å ‚Äî –ø—Å–∏—Ö–æ–ø–∞—Ç-—É–±–∏–π—Ü–∞, –∫–æ—Ç–æ—Ä—ã–π –∑–Ω–∞–µ—Ç, –≥–¥–µ —Ç—ã –∂–∏–≤—ë—à—å.",
        "–ï—Å–ª–∏ –≤ –õ–∏–Ω—É–∫—Å–µ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –æ—Ç–∫—Ä–æ–π –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –∏ –∏—Å–ø—Ä–∞–≤—å. –ï—Å–ª–∏ –≤ Windows —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–µ—Ä–µ–ø–ª–∞—á–∏–≤–∞–π –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
        "–õ–∏–Ω—É–∫—Å–æ–∏–¥ –Ω–µ —Ç–µ—Ä—è–µ—Ç—Å—è –≤ —Å–ª–æ–∂–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö, –æ–Ω –ø—Ä–æ—Å—Ç–æ –ø–∏—à–µ—Ç –Ω–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç.",
        "–í –õ–∏–Ω—É–∫—Å–µ –≤—Å—ë —Ñ–∞–π–ª. –î–∞–∂–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ‚Äî —ç—Ç–æ —Ñ–∞–π–ª. –î–∞–∂–µ —Ñ–∞–π–ª ‚Äî —ç—Ç–æ —Ñ–∞–π–ª.",
        "–õ–∏–Ω—É–∫—Å ‚Äî —ç—Ç–æ –Ω–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞, –∞ —Å–ø–æ—Å–æ–± –º—ã—à–ª–µ–Ω–∏—è.",
        "–õ–∏–Ω—É–∫—Å–æ–∏–¥ –º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å –≤—Å—ë. –í–æ–ø—Ä–æ—Å —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∫–æ–Ω—Å–æ–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.",
        "–õ–∏–Ω—É–∫—Å ‚Äî —ç—Ç–æ —Å–≤–æ–±–æ–¥–∞. –°–≤–æ–±–æ–¥–∞ —Ç—Ä–∞—Ç–∏—Ç—å —á–∞—Å—ã –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ç–æ–≥–æ, —á—Ç–æ –≤ –¥—Ä—É–≥–∏—Ö —Å–∏—Å—Ç–µ–º–∞—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–∑ –∫–æ—Ä–æ–±–∫–∏.",
        "–õ–∏–Ω—É–∫—Å–æ–∏–¥ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Ç–µ—Ä—è–µ—Ç –¥–∞–Ω–Ω—ã–µ. –û–Ω –ø—Ä–æ—Å—Ç–æ –∑–∞–±—ã–≤–∞–µ—Ç, –∫—É–¥–∞ –∏—Ö —Å–æ—Ö—Ä–∞–Ω–∏–ª.",
        "–õ–∏–Ω—É–∫—Å ‚Äî —ç—Ç–æ —Å–∏—Å—Ç–µ–º–∞, –≥–¥–µ –∫–∞–∂–¥—ã–π –º–æ–∂–µ—Ç –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º —è–¥—Ä–∞.",
        "–õ–∏–Ω—É–∫—Å–æ–∏–¥ –Ω–µ –±–æ–∏—Ç—Å—è –≤–∏—Ä—É—Å–æ–≤. –í–∏—Ä—É—Å—ã –±–æ—è—Ç—Å—è –ª–∏–Ω—É–∫—Å–æ–∏–¥–æ–≤.",
        "–õ–∏–Ω—É–∫—Å ‚Äî —ç—Ç–æ –∫–æ–≥–¥–∞ —Ç—ã –∑–Ω–∞–µ—à—å, —á—Ç–æ —Ç–∞–∫–æ–µ grep, awk –∏ sed, –Ω–æ –Ω–µ –ø–æ–º–Ω–∏—à—å –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤.",
        "–õ–∏–Ω—É–∫—Å–æ–∏–¥ –Ω–µ –∏—â–µ—Ç –ª—ë–≥–∫–∏—Ö –ø—É—Ç–µ–π. –û–Ω –∏—Ö –∫–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç.",
        "–õ–∏–Ω—É–∫—Å ‚Äî —ç—Ç–æ —Å–∏—Å—Ç–µ–º–∞, –≥–¥–µ –¥–∞–∂–µ –æ—à–∏–±–∫–∏ ‚Äî —ç—Ç–æ —Ñ–∏—á–∏.",
        "–õ–∏–Ω—É–∫—Å–æ–∏–¥ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å. –û–Ω –ø–∏—à–µ—Ç —Å–∫—Ä–∏–ø—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ä–∏—Å—É–µ—Ç –æ–∫–Ω–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏.",
        "–õ–∏–Ω—É–∫—Å ‚Äî —ç—Ç–æ –∫–æ–≥–¥–∞ —Ç—ã –º–æ–∂–µ—à—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Å—ë, –Ω–æ –Ω–µ –∑–Ω–∞–µ—à—å, –∑–∞—á–µ–º.",
        "–õ–∏–Ω—É–∫—Å–æ–∏–¥ –Ω–µ —É–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª—ã. –û–Ω –∏—Ö –∞—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç –≤ /dev/null.",
        "–õ–∏–Ω—É–∫—Å ‚Äî —ç—Ç–æ —Å–∏—Å—Ç–µ–º–∞, –≥–¥–µ –∫–∞–∂–¥—ã–π –º–æ–∂–µ—Ç –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—Ç.",
        "–õ–∏–Ω—É–∫—Å–æ–∏–¥ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º—ã—à—å. –û–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ —Å–∏–ª—É –º—ã—Å–ª–∏.",
        "–õ–∏–Ω—É–∫—Å ‚Äî —ç—Ç–æ –∫–æ–≥–¥–∞ —Ç—ã –∑–Ω–∞–µ—à—å, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∏—Å—Ç–µ–º–∞, –Ω–æ –Ω–µ –º–æ–∂–µ—à—å –æ–±—ä—è—Å–Ω–∏—Ç—å —ç—Ç–æ –¥—Ä—É–≥–∏–º.",
        "–õ–∏–Ω—É–∫—Å–æ–∏–¥ –Ω–µ –±–æ–∏—Ç—Å—è —Å–∏–Ω–µ–≥–æ —ç–∫—Ä–∞–Ω–∞ —Å–º–µ—Ä—Ç–∏. –£ –Ω–µ–≥–æ –ø—Ä–æ—Å—Ç–æ –Ω–µ—Ç —ç–∫—Ä–∞–Ω–∞.",
        "–õ–∏–Ω—É–∫—Å ‚Äî —ç—Ç–æ –∫–æ–≥–¥–∞ —Ç—ã –º–æ–∂–µ—à—å —Å–æ–±—Ä–∞—Ç—å —Å–≤–æ—é —Å–∏—Å—Ç–µ–º—É –∏–∑ –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤, –Ω–æ –Ω–µ –º–æ–∂–µ—à—å —Å–æ–±—Ä–∞—Ç—å —à–∫–∞—Ñ –∏–∑ –ò–ö–ï–ê.",
        "–õ–∏–Ω—É–∫—Å–æ–∏–¥ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–Ω—Ç–∏–≤–∏—Ä—É—Å. –û–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±—ç–∫–∞–ø—ã.",
        "–õ–∏–Ω—É–∫—Å ‚Äî —ç—Ç–æ –∫–æ–≥–¥–∞ —Ç—ã –º–æ–∂–µ—à—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Å—ë, –Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.",
        "–õ–∏–Ω—É–∫—Å–æ–∏–¥ –Ω–µ –∂–∞–ª—É–µ—Ç—Å—è –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã. –û–Ω –ø–∏—à–µ—Ç –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç—ã.",
        "–õ–∏–Ω—É–∫—Å ‚Äî —ç—Ç–æ –∫–æ–≥–¥–∞ —Ç—ã –∑–Ω–∞–µ—à—å, —á—Ç–æ —Ç–∞–∫–æ–µ —è–¥—Ä–æ, –Ω–æ –Ω–µ –∑–Ω–∞–µ—à—å, —á—Ç–æ –Ω–∞ –æ–±–µ–¥."
    ];
    const randomIndex = Math.floor(Math.random() * jokes.length);
    bot.sendMessage(chatId, jokes[randomIndex]);
}

function runQuiz(chatId) {
    const quizzes = [
        { question: '–ö–∞–∫–æ–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤ C++?', answer: '==' },
        { question: '–ö–∞–∫–æ–π –∫–æ–º–∞–Ω–¥–æ–π –≤ bash –º–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏?', answer: 'ls' },
        { question: '–ß—Ç–æ —Ç–∞–∫–æ–µ pamac?', answer: '–ì–æ–≤–Ω–æ' },
        { question: '–ß—Ç–æ —Ç–∞–∫–æ–µ AUR –≤ Arch Linux/Arch based distributions?', answer: 'Arch User Repository' },
        { question: '–ö–∞–∫–æ–π —Å–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å LFS –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ –∂–µ–ª–µ–∑–æ?', answer: '–†—É–∫–∞–º–∏' },
        { question: '–ö–∞–∫–æ–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ Android?', answer: 'Java' },
        { question: '–ö–∞–∫–æ–π —Å–∏–º–≤–æ–ª –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è —É–∫–∞–∑–∞—Ç–µ–ª—è –≤ C++?', answer: '*' },
        { question: '–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞ –∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –≤ –∫–æ–¥–µ?', answer: '–û—Ç–ª–∞–¥–∫–∞' },
        { question: '–ö–∞–∫–æ–π –ø—Ä–æ—Ç–æ–∫–æ–ª –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ?', answer: 'HTTPS' },
        { question: '–ö–∞–∫–æ–π –º–µ—Ç–æ–¥ –º–∞—Å—Å–∏–≤–∞ JavaScript –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞?', answer: 'push' },
        { question: '–ö–∞–∫–æ–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è —á–∞—â–µ –≤—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞?', answer: 'PHP' },
        { question: '–ö–∞–∫–æ–π —Ç–µ–≥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏ –≤ HTML?', answer: '<a>' },
        { question: '–ö–∞–∫–æ–π –∫–æ–º–∞–Ω–¥–æ–π –≤ Git –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≤–µ—Ç–∫—É?', answer: 'git branch' },
        { question: '–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–æ–≤ Linux?', answer: 'fstab' },
        { question: '–ö–∞–∫–æ–π —Å–∏–º–≤–æ–ª –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ Python?', answer: '#' },
        { question: '–ö–∞–∫–æ–π –º–µ—Ç–æ–¥ —Å—Ç—Ä–æ–∫–∏ –≤ JavaScript –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä?', answer: 'toLowerCase' },
        { question: '–ö–∞–∫–æ–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –≤ C++?', answer: '%' },
        { question: '–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞ –≤ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª?', answer: '–ö–æ–º–ø–∏–ª—è—Ü–∏—è' },
        { question: '–ö–∞–∫–æ–π –∫–æ–º–∞–Ω–¥–æ–π –≤ SQL –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã?', answer: 'SELECT *' },
        { question: '–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö, —Ä–∞–±–æ—Ç–∞—é—â–∞—è –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É LIFO?', answer: '–°—Ç–µ–∫' },
        { question: '–ö–∞–∫–æ–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü?', answer: 'CSS' },
        { question: '–ö–∞–∫–æ–π –∫–æ–º–∞–Ω–¥–æ–π –≤ Linux –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É?', answer: 'chmod' },
        { question: '–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –æ—à–∏–±–∫–∞, –≤–æ–∑–Ω–∏–∫–∞—é—â–∞—è –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã?', answer: '–ò—Å–∫–ª—é—á–µ–Ω–∏–µ' },
        { question: '–ö–∞–∫–æ–π –º–µ—Ç–æ–¥ –º–∞—Å—Å–∏–≤–∞ –≤ JavaScript –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞?', answer: 'pop' },
        { question: '–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ü–∏–∫–ª —Å –ø—Ä–µ–¥—É—Å–ª–æ–≤–∏–µ–º –≤ Python?', answer: 'while' },
        { question: '–ö–∞–∫–æ–π –∫–æ–º–∞–Ω–¥–æ–π –≤ Docker –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä?', answer: 'docker run' },
        { question: '–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç—å—é –≤ —è–∑—ã–∫–∞—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è?', answer: '–°–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞' },
        { question: '–ö–∞–∫–æ–π —Å–∏–º–≤–æ–ª –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ SQL?', answer: '--' },
        { question: '–ö–∞–∫–æ–π –º–µ—Ç–æ–¥ —Å—Ç—Ä–æ–∫–∏ –≤ JavaScript –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–±–µ–ª–æ–≤ —Å –æ–±–æ–∏—Ö –∫–æ–Ω—Ü–æ–≤ —Å—Ç—Ä–æ–∫–∏?', answer: 'trim' },
        { question: '–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –æ—à–∏–±–∫–∞, –≤–æ–∑–Ω–∏–∫–∞—é—â–∞—è –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∏–Ω–¥–µ–∫—Å—É –º–∞—Å—Å–∏–≤–∞?', answer: 'IndexError' },
        { question: '–ö–∞–∫–æ–π –∫–æ–º–∞–Ω–¥–æ–π –≤ Linux –º–æ–∂–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞?', answer: 'cat' },
        { question: '–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –∏ –≤—ã—è–≤–ª–µ–Ω–∏–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫?', answer: '–õ–∏–Ω—Ç–∏–Ω–≥' },
        { question: '–ö–∞–∫–æ–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Å—Ç—Ä–æ–∫ –≤ Python?', answer: '+' },
        { question: '–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö, —Ä–∞–±–æ—Ç–∞—é—â–∞—è –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É FIFO?', answer: '–û—á–µ—Ä–µ–¥—å' },
        { question: '–ö–∞–∫–æ–π –∫–æ–º–∞–Ω–¥–æ–π –≤ Git –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ —É–¥–∞–ª—ë–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π?', answer: 'git push' },
        { question: '–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ?', answer: '–ë–∏—Ç' },
        { question: '–ö–∞–∫–æ–π –º–µ—Ç–æ–¥ –º–∞—Å—Å–∏–≤–∞ –≤ JavaScript –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–∏–≤–∞?', answer: 'unshift' },
        { question: '–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –æ—à–∏–±–∫–∞, –≤–æ–∑–Ω–∏–∫–∞—é—â–∞—è –ø—Ä–∏ –¥–µ–ª–µ–Ω–∏–∏ –Ω–∞ –Ω–æ–ª—å?', answer: 'ZeroDivisionError' },
        { question: '–ö–∞–∫–æ–π –∫–æ–º–∞–Ω–¥–æ–π –≤ Linux –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é?', answer: 'mkdir' },
        { question: '–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞ –≤ –¥—Ä—É–≥–æ–π?', answer: '–ö–∞—Å—Ç–∏–Ω–≥' },
        { question: '–ö–∞–∫–æ–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ "–ò" –≤ C++?', answer: '&&' },
        { question: '–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –æ–±–ª–∞—Å—Ç—å –ø–∞–º—è—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã?', answer: '–ö—É—á–∞' },
        { question: '–ö–∞–∫–æ–π –∫–æ–º–∞–Ω–¥–æ–π –≤ SQL –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É?', answer: 'DROP TABLE' },
        { question: '–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–æ—Ü–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è?', answer: '–°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è' },
        { question: '–ö–∞–∫–æ–π –º–µ—Ç–æ–¥ —Å—Ç—Ä–æ–∫–∏ –≤ JavaScript –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∑–∞–º–µ–Ω—ã —á–∞—Å—Ç–∏ —Å—Ç—Ä–æ–∫–∏ –¥—Ä—É–≥–æ–π —Å—Ç—Ä–æ–∫–æ–π?', answer: 'replace' },
        { question: '–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –æ—à–∏–±–∫–∞, –≤–æ–∑–Ω–∏–∫–∞—é—â–∞—è –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –æ–±—ä–µ–∫—Ç—É, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –±—ã–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω?', answer: 'NullPointerException' },
        { question: '–ö–∞–∫–æ–π –∫–æ–º–∞–Ω–¥–æ–π –≤ Linux –º–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ —Ç–µ–∫—É—â–∏–π –∫–∞—Ç–∞–ª–æ–≥?', answer: 'pwd' },
        { question: '–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–æ—Ü–µ—Å—Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫–æ–¥–∞ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏?', answer: '–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥' },
        { question: '–ö–∞–∫–æ–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ "–ò–õ–ò" –≤ Python?', answer: 'or' },
        { question: '–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∞—è —Å–æ–±–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø–∞—Ä "–∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ"?', answer: '–°–ª–æ–≤–∞—Ä—å' },
        { question: '–ö–∞–∫–æ–π –∫–æ–º–∞–Ω–¥–æ–π –≤ Git –º–æ–∂–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–º–∏—Ç–æ–≤?', answer: 'git log' },
        { question: '–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ –∫–æ–¥–∞ –≤ –±–æ–ª–µ–µ –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π —è–∑—ã–∫?', answer: '–î–µ–∫–æ–º–ø–∏–ª—è—Ü–∏—è' },
        { question: '–ö–∞–∫–æ–π –º–µ—Ç–æ–¥ –º–∞—Å—Å–∏–≤–∞ –≤ JavaScript –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤?', answer: 'sort' },
        { question: '–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –æ—à–∏–±–∫–∞, –≤–æ–∑–Ω–∏–∫–∞—é—â–∞—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–π?', answer: 'OverflowError' },
        { question: '–ö–∞–∫–æ–π –∫–æ–º–∞–Ω–¥–æ–π –≤ Linux –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª?', answer: 'rm' },
        { question: '–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–æ—Ü–µ—Å—Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞ –≤ –æ–¥–Ω—É?', answer: '–ö–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è' },
        { question: '–ö–∞–∫–æ–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–±–∏—Ç–æ–≤–æ–≥–æ "–ò" –≤ C++?', answer: '&' }
		];
    const randomIndex = Math.floor(Math.random() * quizzes.length);
    const quiz = quizzes[randomIndex];
    bot.sendMessage(chatId, `–í–æ–ø—Ä–æ—Å: ${quiz.question}`);
    bot.once('message', (msg) => {
        if (msg.chat.id === chatId) {
            if (msg.text.trim().toLowerCase() === quiz.answer.toLowerCase()) {
                bot.sendMessage(chatId, "–ü—Ä–∞–≤–∏–ª—å–Ω–æ!");
            } else {
                bot.sendMessage(chatId, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.");
            }
        }
    });
}

// /myid
bot.onText(/\/myid/, (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    bot.sendMessage(chatId, `–¢–≤–æ–π ID: ${userId}`);
});

bot.onText(/\/startx/, (msg) => {
    bot.sendMessage(msg.chat.id, "xinit: unable to run server");
});


bot.onText(/\/joke/, (msg) => {
    tellJoke(msg.chat.id);
});

bot.onText(/\/quiz/, (msg) => {
    runQuiz(msg.chat.id);
});

bot.onText(/\/warn (.+)/, (msg, match) => {
    const userId = msg.from.id;
    if (isAdmin(userId)) {
        const username = match[1];
        warnUser(username, msg.chat.id);
    } else {
        bot.sendMessage(msg.chat.id, "Permission Denied!");
    }
});

bot.onText(/\/unwarn (.+)/, (msg, match) => {
    const userId = msg.from.id;
    if (isAdmin(userId)) {
        const username = match[1];
        unwarnUser(username, msg.chat.id);
    } else {
        bot.sendMessage(msg.chat.id, "Permission Denied!");
    }
});

bot.onText(/\/warns/, (msg) => {
    const userId = msg.from.id;
    if (isAdmin(userId)) {
        showWarns(msg.chat.id);
    } else {
        bot.sendMessage(msg.chat.id, "Permission Denied!");
    }
});

bot.onText(/\/bans/, (msg) => {
    const userId = msg.from.id;
    if (isAdmin(userId)) {
        showBans(msg.chat.id);
    } else {
        bot.sendMessage(msg.chat.id, "Permission Denied!");
    }
});

bot.onText(/\/mutes/, (msg) => {
    const userId = msg.from.id;
    if (isAdmin(userId)) {
        showMutes(msg.chat.id);
    } else {
        bot.sendMessage(msg.chat.id, "Permission Denied!");
    }
});

bot.onText(/\/mute (\d+)(m|h|d)/ , (msg, match) => {
    const userId = msg.from.id;
    if (isAdmin(userId)) {
        const muteUserId = msg.reply_to_message.from.id;
        const duration = parseInt(match[1]);
        const unit = match[2];
        let durationMoment = moment.duration(duration, unit);
        muteUser(muteUserId, msg.chat.id, durationMoment);
    } else {
        bot.sendMessage(msg.chat.id, "Permission Denied!");
    }
});

bot.onText(/\/unmute/, (msg) => {
    const userId = msg.from.id;
    const chatId = msg.chat.id;

    if (isAdmin(userId)) {
        const targetUserId = msg.reply_to_message.from.id;

        if (muted[targetUserId]) {
            bot.restrictChatMember(chatId, targetUserId, {
                can_send_messages: true,
                can_send_media_messages: true,
                can_send_polls: true,
                can_send_other_messages: true,
                can_add_web_page_previews: true
            });
            delete muted[targetUserId];
            bot.sendMessage(chatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${targetUserId} –±—ã–ª —Ä–∞–∑–º—å—é—á–µ–Ω.`);
        } else {
            bot.sendMessage(chatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${targetUserId} –Ω–µ –±—ã–ª –∑–∞–º—å—é—á–µ–Ω.`);
        }
    } else {
        bot.sendMessage(chatId, "Permission Denied!");
    }
});


bot.onText(/\/ban (\d+)(m|h|d|y)/, (msg, match) => {
    const userId = msg.from.id;
    if (isAdmin(userId)) {
        const banUserId = msg.reply_to_message.from.id;
        const duration = parseInt(match[1]);
        const unit = match[2];
        let durationMoment = moment.duration(duration, unit);
        banUser(banUserId, msg.chat.id, durationMoment);
    } else {
        bot.sendMessage(msg.chat.id, "Permission Denied!");
    }
});

bot.onText(/\/unban/, (msg) => {
    const userId = msg.from.id;
    if (isAdmin(userId)) {
        const unbanUserId = msg.reply_to_message.from.id;
        unbanUser(unbanUserId, msg.chat.id);
    } else {
        bot.sendMessage(msg.chat.id, "Permission Denied!");
    }
});

bot.onText(/\/echo (.+)/, (msg, match) => {
    bot.sendMessage(msg.chat.id, match[1]);
});

bot.onText(/\/date/, (msg) => {
    bot.sendMessage(msg.chat.id, `date: ${moment().format('LL')}`);
});

bot.onText(/\/grub/, (msg) => {
    bot.sendMessage(msg.chat.id, "error: no such partition\nEntering rescue mode...");
});

bot.onText(/\/ls/, (msg) => {
    bot.sendMessage(msg.chat.id, "bot.js");
});

bot.onText(/\/cat/, (msg) => {
    bot.sendMessage(msg.chat.id, "sh: cat: command not found");
});

bot.onText(/\/uptime/, (msg) => {
  const exec = require('child_process').exec;
  exec('uptime -p', (error, stdout) => {
    bot.sendMessage(msg.chat.id, `üïí Uptime: ${stdout.trim()}`);
  });
});

bot.onText(/\/kernel/, (msg) => {
  const exec = require('child_process').exec;
  exec("uname -r", (error, stdout) => {
    bot.sendMessage(msg.chat.id, `üñ• –í–µ—Ä—Å–∏—è —è–¥—Ä–∞: ${stdout.trim()}`);
  });
});

bot.onText(/\/arch/, (msg) => {
  const exec = require('child_process').exec;
  exec("uname -m", (error, stdout) => {
    bot.sendMessage(msg.chat.id, `üíæ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ CPU: ${stdout.trim()}`);
  });
});

// Execute code

bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;

  if (!msg.text || typeof msg.text !== 'string') return; 
  const text = msg.text.toLowerCase();
  if (text !== '—Ä—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞') return;

  if (games.has(chatId)) {
    bot.sendMessage(chatId, "‚è≥ –í —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –∏–¥—ë—Ç —Ä—É–ª–µ—Ç–∫–∞!");
    return;
  }

  const player = msg.from.first_name || '–°—Ç—Ä–µ–ª–æ–∫';
  const bullets = Array(6).fill('‚óØ'); 
  const bulletPosition = Math.floor(Math.random() * 6); 
  bullets[bulletPosition] = 'üí•';
  let currentPosition = 0;   const game = {
    player,
    userId,
    bullets,
    bulletPosition,
    currentPosition,
    spins: 0
  };
  games.set(chatId, game);

  const keyboard = {
    inline_keyboard: [
      [
        { text: "‚¨ÖÔ∏è –í–ª–µ–≤–æ", callback_data: `rr_${chatId}_left` },
        { text: "‚û°Ô∏è –í–ø—Ä–∞–≤–æ", callback_data: `rr_${chatId}_right` },
      ],
      [
        { text: "üî´ –í—ã—Å—Ç—Ä–µ–ª–∏—Ç—å", callback_data: `rr_${chatId}_shoot` }
      ]
    ]
  };

  try {
    await bot.sendMessage(chatId, `üî´ ${player} –Ω–∞—á–∞–ª –†—É—Å—Å–∫—É—é —Ä—É–ª–µ—Ç–∫—É!\n–ë–∞—Ä–∞–±–∞–Ω: ${bullets.join(' ')}\n–¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è: ${game.currentPosition + 1} (${bullets[currentPosition]})\n–ö—Ä—É—Ç–∏ –∏–ª–∏ —Å—Ç—Ä–µ–ª—è–π!`, {
      reply_markup: keyboard
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    bot.sendMessage(chatId, "‚ö†Ô∏è –ù–µ —Å–º–æ–≥ –Ω–∞—á–∞—Ç—å —Ä—É–ª–µ—Ç–∫—É, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!");
    games.delete(chatId);
  }
});

bot.on('callback_query', async (query) => {
  const chatId = query.message?.chat.id;
  const userId = query.from.id;
  const data = query.data?.split('_');

  if (!chatId || !data || data[0] !== 'rr' || parseInt(data[1]) !== chatId) {
    bot.answerCallbackQuery(query.id, { text: "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!" });
    return;
  }

  if (!games.has(chatId)) {
    bot.answerCallbackQuery(query.id, { text: "–†—É–ª–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!" });
    return;
  }

  const game = games.get(chatId);
  if (userId !== game.userId) {
    bot.answerCallbackQuery(query.id, { text: "–≠—Ç–æ –Ω–µ —Ç–≤–æ—è —Ä—É–ª–µ—Ç–∫–∞!" });
    return;
  }

  const action = data[2];

  const updateKeyboard = () => ({
    inline_keyboard: [
      [
        { text: "‚¨ÖÔ∏è –í–ª–µ–≤–æ", callback_data: `rr_${chatId}_left` },
        { text: "‚û°Ô∏è –í–ø—Ä–∞–≤–æ", callback_data: `rr_${chatId}_right` },
      ],
      [
        { text: "üî´ –í—ã—Å—Ç—Ä–µ–ª–∏—Ç—å", callback_data: `rr_${chatId}_shoot` }
      ]
    ]
  });

  if (action === 'left' || action === 'right') {
    game.spins++;
    if (action === 'left') {
      game.currentPosition = (game.currentPosition - 1 + 6) % 6;
    } else {
      game.currentPosition = (game.currentPosition + 1) % 6;
    }

    const displayBullets = game.bullets.map((b, i) => i === game.currentPosition ? `‚û°Ô∏è${b}` : b).join(' ');
    try {
      await bot.editMessageText(
        `üî´ ${game.player}, —Ç—ã –∫—Ä—É—Ç–∏—à—å –±–∞—Ä–∞–±–∞–Ω (${game.spins} –≤—Ä–∞—â–µ–Ω–∏–π)\n–ë–∞—Ä–∞–±–∞–Ω: ${displayBullets}\n–¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è: ${game.currentPosition + 1}`,
        {
          chat_id: chatId,
          message_id: query.message.message_id,
          reply_markup: updateKeyboard()
        }
      );
      bot.answerCallbackQuery(query.id, { text: `–ë–∞—Ä–∞–±–∞–Ω –∫—Ä—É—Ç–∏—Ç—Å—è ${action === 'left' ? '–≤–ª–µ–≤–æ' : '–≤–ø—Ä–∞–≤–æ'}!` });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      bot.sendMessage(chatId, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞, —Ä—É–ª–µ—Ç–∫–∞ —Å–ª–æ–º–∞–ª–∞—Å—å!");
      games.delete(chatId);
    }
    return;
  }

  if (action === 'shoot') {
    const isBullet = game.currentPosition === game.bulletPosition;
    try {
      if (isBullet) {
        await bot.editMessageText(
          `üí• –ë–ê–•! ${game.player}, —Ç—ã –ø—Ä–æ–∏–≥—Ä–∞–ª!\n–ë–∞—Ä–∞–±–∞–Ω: ${game.bullets.join(' ')}\n–ü–∞—Ç—Ä–æ–Ω –±—ã–ª –≤ –ø–æ–∑–∏—Ü–∏–∏ ${game.bulletPosition + 1}.\nüîá –ü—ã—Ç–∞—é—Å—å –¥–∞—Ç—å –º—É—Ç –Ω–∞ 1 —á–∞—Å...`,
          {
            chat_id: chatId,
            message_id: query.message.message_id
          }
        );
        try {
          await bot.restrictChatMember(chatId, game.userId, {
            until_date: Math.floor(Date.now() / 1000) + 3600, // 1 —á–∞—Å
            can_send_messages: false,
            can_send_media: false,
            can_send_polls: false,
            can_send_other_messages: false,
            can_add_web_page_previews: false
          });
          await bot.sendMessage(chatId, `üîá ${game.player} –∑–∞–º—É—á–µ–Ω –Ω–∞ 1 —á–∞—Å!`);
        } catch (muteError) {
          console.error('–û—à–∏–±–∫–∞ –º—É—Ç–∞:', muteError);
          await bot.sendMessage(chatId, `‚ö†Ô∏è –ù–µ —Å–º–æ–≥ –∑–∞–º—É—Ç–∏—Ç—å ${game.player}! –£–±–µ–¥–∏—Å—å, —á—Ç–æ —É –º–µ–Ω—è –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.`);
        }
      } else {
        await bot.editMessageText(
          `üî´ –©–Å–õ–ö! ${game.player}, –ø–æ–≤–µ–∑–ª–æ, –ø–∞—Ç—Ä–æ–Ω–∞ –Ω–µ—Ç!\n–ë–∞—Ä–∞–±–∞–Ω: ${game.bullets.join(' ')}\n–¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è: ${game.currentPosition + 1}\n–ö—Ä—É—Ç–∏ –¥–∞–ª—å—à–µ –∏–ª–∏ —Å—Ç—Ä–µ–ª—è–π —Å–Ω–æ–≤–∞!`,
          {
            chat_id: chatId,
            message_id: query.message.message_id,
            reply_markup: updateKeyboard()
          }
        );
      }
      bot.answerCallbackQuery(query.id, { text: isBullet ? "üíÄ –¢—ã –º—ë—Ä—Ç–≤!" : "üçÄ –¢—ã –∂–∏–≤!" });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Å—Ç—Ä–µ–ª–µ:', error);
      bot.sendMessage(chatId, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –∏–≥—Ä–µ, —Ä—É–ª–µ—Ç–∫–∞ —Å–ª–æ–º–∞–ª–∞—Å—å!");
    }

    if (isBullet) {
      games.delete(chatId);     }
  }
});

// SVO

let secretNumber = Math.floor(Math.random() * 100) + 1;

bot.onText(/\/guess (\d+)/, (msg, match) => {
  const guess = parseInt(match[1]);
  if (guess === secretNumber) {
    bot.sendMessage(msg.chat.id, "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã —É–≥–∞–¥–∞–ª —á–∏—Å–ª–æ!");
    secretNumber = Math.floor(Math.random() * 100) + 1;
  } else {
    bot.sendMessage(msg.chat.id, guess > secretNumber ? "üìâ –ú–µ–Ω—å—à–µ!" : "üìà –ë–æ–ª—å—à–µ!");
  }
});

bot.onText(/\/coinflip/, async (msg) => {
  const chatId = msg.chat.id;
  const message = await bot.sendMessage(chatId, "ü™ô –ö—Ä—É—á—É...");
  await new Promise(r => setTimeout(r, 500));
  await bot.editMessageText("ü™ô –û—Ä—ë–ª –∏–ª–∏ –†–µ—à–∫–∞?", { chat_id: chatId, message_id: message.message_id });
  await new Promise(r => setTimeout(r, 500));
  const result = Math.random() < 0.5 ? "ü™ô –û—Ä—ë–ª" : "ü™ô –†–µ—à–∫–∞";
  bot.editMessageText(result, { chat_id: chatId, message_id: message.message_id });
});

const answers = ["–î–∞", "–ù–µ—Ç", "–í–æ–∑–º–æ–∂–Ω–æ", "–°–ø—Ä–æ—Å–∏ –ø–æ–∑–∂–µ", "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ!", "–°–æ–º–Ω–µ–≤–∞—é—Å—å", "–ö–æ–Ω–µ—á–Ω–æ –Ω–µ—Ç!"];

bot.onText(/\/8ball (.+)/, (msg) => {
  bot.sendMessage(msg.chat.id, `üé± –û—Ç–≤–µ—Ç: ${answers[Math.floor(Math.random() * answers.length)]}`);
});

bot.on('message', (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const userName = msg.from.first_name || 'there';
    const text = msg.text.toLowerCase();

    if (text === 'sudo rm -rf /*') {
      const mention = `@${msg.from.username || userName}`;
      const replyMessage = `${mention} –ù—É —Ç—ã –∏ —à—É—Ç–Ω–∏–∫!`;

      bot.sendMessage(chatId, replyMessage, {
        parse_mode: 'Markdown'
      });
    }
  });

bot.on('message', (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const userName = msg.from.first_name || 'there';
    const text = msg.text.toLowerCase();

    if (text === '–¢—ã –µ–±–ª–∞–Ω') {
      const mention = `@${msg.from.username || userName}`;
      const replyMessage = `${mention} –ë–µ–∑ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–π!`;

      bot.sendMessage(chatId, replyMessage, {
        parse_mode: 'Markdown'
      });
    }
});

bot.on('message', (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const userName = msg.from.first_name || 'there';
    const text = msg.text.toLowerCase();

    if (text === '–¢—ã —Ç—É–ø–æ–π') {
      const mention = `@${msg.from.username || userName}`;
      const replyMessage = `${mention} –ù—É —Ç—ã –∏ —à—É—Ç–Ω–∏–∫!`;

      bot.sendMessage(chatId, replyMessage, {
        parse_mode: 'Markdown'
      });
    }
});

bot.on('message', (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const userName = msg.from.first_name || 'there';
    const text = msg.text.toLowerCase();

    if (text === 'sudo rm -rf /* --no-preserve-root') {
      const mention = `@${msg.from.username || userName}`;
      const replyMessage = `${mention} –ù—É —Ç—ã –∏ —à—É—Ç–Ω–∏–∫!`;

      bot.sendMessage(chatId, replyMessage, {
        parse_mode: 'Markdown'
      });
    }
});

  bot.on('message', (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const userName = msg.from.first_name || 'there';
    const text = msg.text.toLowerCase();

    if (text === 'rm -rf /*') {
      const mention = `@${msg.from.username || userName}`;
      const replyMessage = `${mention} Permission Denied!`;

      bot.sendMessage(chatId, replyMessage, {
        parse_mode: 'Markdown'
      });
    }
});



bot.on('message', (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const userName = msg.from.first_name || 'there';
    const text = msg.text.toLowerCase();

  if (text === 'doas /warn @makefilesystem') {
    const mention = `@${msg.from.username || userName}`;
    const replyMessage = `${mention} –°—É–∫–∞`;

    bot.sendMessage(chatId, replyMessage, {
      parse_mode: 'Markdown'
    });
  }
});

// /help
bot.onText(/\/help/, (msg) => {
    const helpMessage = `
üìò *–ú–∞–Ω—É–∞–ª –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞*

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã*:
/startx ‚Äî –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞.
/joke ‚Äî –†–∞—Å—Å–∫–∞–∑–∞—Ç—å —à—É—Ç–∫—É.
/quiz ‚Äî –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É.
/echo [—Ç–µ–∫—Å—Ç] ‚Äî –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.
/date ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
/fetch ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –û–° —Å–µ—Ä–≤–µ—Ä–∞.
/help ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.
/myid - –í—ã–≤–µ—Å—Ç–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
–ë—Ä–∞–∫ - ( –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ ) - –≤—Å—Ç—É–ø–∏—Ç—å –≤ –±—Ä–∞–∫ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º , –†–∞–∑–≤–æ–¥ , —á—Ç–æ–±—ã —Ä–∞–∑–≤–µ—Å—Ç–∏—Å—å
–†—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞ - –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä—É—Å—Å–∫—É—é —Ä—É–ª–µ—Ç–∫—É

*–ú–æ–¥–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã* _(–¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º)_:
/warn [username] ‚Äî –í—ã–¥–∞—Ç—å –≤–∞—Ä–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –¢—Ä–∏ –≤–∞—Ä–Ω–∞ ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±–∞–Ω.
/unwarn [username] ‚Äî –£–±—Ä–∞—Ç—å –≤–∞—Ä–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
/warns ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∞—Ä–Ω–∞–º–∏.
/mute [–≤—Ä–µ–º—è][m|h|d] ‚Äî –ó–∞–º—å—é—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è. –ü—Ä–∏–º–µ—Ä: /mute 5m.
/unmute ‚Äî –†–∞–∑–º—å—é—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
/mutes ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–º—å—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
/ban [–≤—Ä–µ–º—è][m|h|d|y] ‚Äî –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤—Ä–µ–º—è –∏–ª–∏ –Ω–∞–≤—Å–µ–≥–¥–∞. –ü—Ä–∏–º–µ—Ä: /ban 1h.
/unban ‚Äî –†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
/bans ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

*–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã*:
–ë–æ—Ç –∫—Ç–æ <>
/newyear - –ü–æ–∫–∞–∑–∞—Ç—å —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–æ –Ω–æ–≤–æ–≥–æ –≥–æ–¥–∞
/reminder <–æ—á–µ–º–Ω–∞–ø–æ–º–Ω–∏—Ç—å> d|m|h
/quote - –¶–∏—Ç–∞—Ç–∞
/fact - –†–∞–Ω–¥–æ–º–Ω—ã–π —Ñ–∞–∫—Ç
/grub
/uptime - –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞
/coinflip - –ë—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É
/guess - –£–≥–∞–¥–∞—Ç—å —á–∏—Å–ª–æ
/8ball - –£–∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç
/arch - –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞
/kernel - –í–µ—Ä—Å–∏—è —è–¥—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞
/rand - –í—ã–±—Ä–∞—Ç—å –Ω–∞ —Ä–∞–Ω–¥–æ–º
/qr <—Ç–µ–∫—Å—Ç –∏–ª–∏ —Å—Å—ã–ª–∫–∞> - –°–æ–∑–¥–∞—Ç—å qr
/rate - –û—Ü–µ–Ω–∏—Ç—å –æ—Ç 1 –¥–æ 10
/rps - –ö–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞
/wish - –ò—Å–ø–æ–ª–Ω–∏—Ç—å –ª—é–±–æ–µ –∂–µ–ª–∞–Ω–∏–µ
/slot - –ò–≥—Ä–æ–≤–æ–π –∞–≤—Ç–æ–º–∞—Ç
/bomb - –†–∞–∑–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ–º–±—ã
/duel - –î—É—ç–ª—å —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
    `;
    bot.sendMessage(msg.chat.id, helpMessage, { parse_mode: 'Markdown' });
});

bot.onText(/\/timer (\d+)/, (msg, match) => {
    const chatId = msg.chat.id;
    const timeInSeconds = parseInt(match[1]);

    if (isNaN(timeInSeconds) || timeInSeconds <= 0) {
        bot.sendMessage(chatId, '–£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.');
        return;
    }

    bot.sendMessage(chatId, `–¢–∞–π–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${timeInSeconds} —Å–µ–∫—É–Ω–¥.`);

    setTimeout(() => {
        bot.sendMessage(chatId, `@${msg.from.username} –ü–æ–¥—ä–µ–º, —Å—Ç—Ä–∞–Ω–∞ –≤–µ–ª–∏–∫–∞—è!`);
    }, timeInSeconds * 1000);
});

const chatUsers = {};

async function updateChatMembers(chatId) {
    try {

        const members = await bot.getChatAdministrators(chatId);

        chatUsers[chatId] = members.map(member => member.user);
    } catch (error) {
        console.error(`[Error while updating members in chat ${chatId}]`, error);
    }
}


function getRandomUser(users) {
    return users[Math.floor(Math.random() * users.length)];
}

// "–ë–æ—Ç –∫—Ç–æ"
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text.toLowerCase();

    if (text.startsWith('–±–æ—Ç –∫—Ç–æ')) {
        const userText = text.slice(8).trim();

        if (!chatUsers[chatId] || chatUsers[chatId].length === 0) {
            await updateChatMembers(chatId);
        }

        const users = chatUsers[chatId] || [];

        if (users.length === 0) {
            bot.sendMessage(chatId, '–û—à–∏–±–∫–∞, —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ 674 —Å–µ–∫—É–Ω–¥—ã');
            return;
        }

        const randomUser = getRandomUser(users);
        const chosenName = randomUser.first_name || '–ê–Ω–æ–Ω–∏–º'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –∏–ª–∏ "–ê–Ω–æ–Ω–∏–º"

        const response = `${chosenName} ${userText || '–∫—Ä—É—Ç–æ–π'}`;
        bot.sendMessage(chatId, response);
    }
});

setInterval(async () => {
    for (const chatId in chatUsers) {
        await updateChatMembers(chatId);
    }
}, 60000);

bot.on('polling_error', (error) => {
	console.log("Polling_error:", error.code, error.response ? error.response.body : error);
});

// rand
bot.onText(/\/rand (.+)/, (msg, match) => {
	    const chatId = msg.chat.id;
	    const input = match[1].trim();

	    if (input.includes('==')) {
		            const [start, end] = input.split('==').map(Number);
		            if (isNaN(start) || isNaN(end) || start >= end) {
				                bot.sendMessage(chatId, '–£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —á–∏—Å–µ–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /rand —á–∏—Å–ª–æ1==—á–∏—Å–ª–æ2');
				            } else {
						                const randomNum = Math.floor(Math.random() * (end - start + 1)) + start;
						                bot.sendMessage(chatId, `[${start}, ${end}]: ${randomNum}`);
						            }
		        } else {
				        const options = input.split(/\s+/);
				        if (options.length < 2) {
						            bot.sendMessage(chatId, 'Usage: /rand gta rdr skyrim mafia');
						        } else {
								            const randomChoice = options[Math.floor(Math.random() * options.length)];
								            bot.sendMessage(chatId, `${randomChoice}`);
								        }
				    }
});


// BRUCKS

const marriageProposals = new Map();

const getMarriageFilePath = (chatId) => `marriages_${chatId}.txt`;

const readMarriages = (chatId) => {
    const filePath = getMarriageFilePath(chatId);
    try {
        const data = fs.readFileSync(filePath, 'utf8');
        return JSON.parse(data) || [];
    } catch (e) {
        return [];
    }
};

const writeMarriages = (chatId, marriages) => {
    const filePath = getMarriageFilePath(chatId);
    fs.writeFileSync(filePath, JSON.stringify(marriages, null, 2));
};

const getDisplayName = (user) => user.username ? `@${user.username}` : user.first_name;

const getMarriageLevel = (days) => {
    if (days <= 30) return '–ú–æ–ª–æ–¥–æ–∂–µ–Ω—ã';
    if (days <= 90) return '–ó–µ–ª–µ–Ω–∞—è —Å–≤–∞–¥—å–±–∞';
    if (days <= 180) return '–†–æ–∑–æ–≤–∞—è —Å–≤–∞–¥—å–±–∞';
    if (days <= 365) return '–ë—É–º–∞–∂–Ω–∞—è —Å–≤–∞–¥—å–±–∞';
    if (days <= 730) return '–î–µ—Ä–µ–≤—è–Ω–Ω–∞—è —Å–≤–∞–¥—å–±–∞';
    return '–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π –±—Ä–∞–∫';
};

function animateMessage(chatId, messageId, texts, delay, index = 0) {
    if (index >= texts.length) return;
    try {
        bot.editMessageText(texts[index], { chat_id: chatId, message_id: messageId });
        setTimeout(() => animateMessage(chatId, messageId, texts, delay, index + 1), delay);
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏:', e);
    }
}

bot.onText(/–ë—Ä–∞–∫/, (msg) => {
    if (!msg.reply_to_message) {
        bot.sendMessage(msg.chat.id, "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –±—Ä–∞–∫!");
        return;
    }

    const proposerId = msg.from.id;
    const proposedId = msg.reply_to_message.from.id;
    const chatId = msg.chat.id;

    if (proposerId === proposedId) {
        bot.sendMessage(chatId, "–ù–µ–ª—å–∑—è –≤—Å—Ç—É–ø–∏—Ç—å –≤ –±—Ä–∞–∫ —Å —Å–∞–º–∏–º —Å–æ–±–æ–π!");
        return;
    }

    const marriages = readMarriages(chatId);
    if (marriages.some(m => (m.user1 === proposerId || m.user2 === proposerId) && m.status !== 'divorced')) {
        bot.sendMessage(chatId, "–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –±—Ä–∞–∫–µ!");
        return;
    }
    if (marriages.some(m => (m.user1 === proposedId || m.user2 === proposedId) && m.status !== 'divorced')) {
        bot.sendMessage(chatId, "–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –±—Ä–∞–∫–µ!");
        return;
    }

    const proposerName = getDisplayName(msg.from);
    const proposedName = getDisplayName(msg.reply_to_message.from);
    const proposalKey = `${chatId}_${proposedId}`;

    marriageProposals.set(proposalKey, { proposerId, proposedId, proposerName, proposedName });

    const keyboard = {
        inline_keyboard: [
            [{ text: '–î–∞', callback_data: 'marriage_yes' }],
            [{ text: '–ù–µ—Ç', callback_data: 'marriage_no' }]
        ]
    };

    bot.sendMessage(chatId,
        `${proposerName} –ø—Ä–µ–¥–ª–æ–∂–∏–ª –±—Ä–∞–∫ ${proposedName}! –°–æ–≥–ª–∞—Å–Ω—ã?`,
        { reply_markup: JSON.stringify(keyboard) }
    );
});

bot.on('callback_query', (query) => {
    const chatId = query.message.chat.id;
    const userId = query.from.id;
    const proposalKey = `${chatId}_${userId}`;
    const proposal = marriageProposals.get(proposalKey);

    if (!proposal || proposal.proposedId !== userId) {
        bot.answerCallbackQuery(query.id, { text: "–≠—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –¥–ª—è –≤–∞—Å!" });
        return;
    }

    const marriages = readMarriages(chatId);

    if (query.data === 'marriage_yes') {
        const marriage = {
            user1: proposal.proposerId,
            user2: proposal.proposedId,
            name1: proposal.proposerName,
            name2: proposal.proposedName,
            status: 'green',
            date: new Date().toISOString()
        };
        marriages.push(marriage);
        writeMarriages(chatId, marriages);

        bot.sendMessage(chatId, "–°–≤–∞–¥—å–±–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è... üíç").then((sentMsg) => {
            const messageId = sentMsg.message_id;
            const texts = [
                "–°–≤–∞–¥—å–±–∞ –≤ —Ä–∞–∑–≥–∞—Ä–µ... üíçüíç",
                "–°–≤–∞–¥—å–±–∞ —Å–æ—Å—Ç–æ—è–ª–∞—Å—å! üíçüíçüíç –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!"
            ];
            animateMessage(chatId, messageId, texts, 1000);
        });
    } else {
        // –ê–Ω–∏–º–∞—Ü–∏—è –æ—Ç–∫–∞–∑–∞
        bot.sendMessage(chatId, "–û—Ç–∫–∞–∑... üíî").then((sentMsg) => {
            const messageId = sentMsg.message_id;
            const texts = [
                "–û—Ç–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç... üíîüíî",
                "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ! üíîüíîüíî"
            ];
            animateMessage(chatId, messageId, texts, 1000);
        });
    }

    marriageProposals.delete(proposalKey);
    bot.deleteMessage(chatId, query.message.message_id);
    bot.answerCallbackQuery(query.id);
});

bot.onText(/–†–∞–∑–≤–æ–¥/, (msg) => {
    if (!msg.reply_to_message) {
        bot.sendMessage(msg.chat.id, "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—É–ø—Ä—É–≥–∞ –¥–ª—è —Ä–∞–∑–≤–æ–¥–∞!");
        return;
    }

    const userId = msg.from.id;
    const spouseId = msg.reply_to_message.from.id;
    const chatId = msg.chat.id;

    const marriages = readMarriages(chatId);
    const marriage = marriages.find(m =>
        (m.user1 === userId && m.user2 === spouseId) ||
        (m.user1 === spouseId && m.user2 === userId)
    );

    if (!marriage || marriage.status === 'divorced') {
        bot.sendMessage(chatId, "–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –±—Ä–∞–∫–µ —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º!");
        return;
    }

    marriage.status = 'divorced';
    marriage.divorceDate = new Date().toISOString();
    writeMarriages(chatId, marriages);

    bot.sendMessage(chatId, "–†–∞–∑–≤–æ–¥... üëã").then((sentMsg) => {
        const messageId = sentMsg.message_id;
        const texts = [
            "–†–∞–∑–≤–æ–¥ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ... üëãüëã",
            "–†–∞–∑–≤–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω! üëãüëãüëã"
        ];
        animateMessage(chatId, messageId, texts, 1000);
    });
});

bot.onText(/–ë—Ä–∞–∫–∏/, (msg) => {
    const chatId = msg.chat.id;
    const marriages = readMarriages(chatId);

    if (!marriages.length) {
        bot.sendMessage(chatId, "–í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç –±—Ä–∞–∫–æ–≤!");
        return;
    }

    const statusNames = {
        'green': '–ó–µ–ª–µ–Ω–∞—è —Å–≤–∞–¥—å–±–∞',
        'divorced': '–†–∞—Å—Ç–æ—Ä–≥–Ω—É—Ç'
    };

    let response = "üíû –°–ø–∏—Å–æ–∫ –±—Ä–∞–∫–æ–≤:\n\n";
    marriages.forEach((m, i) => {
        const status = statusNames[m.status] || m.status;
        response += `${i + 1}. ${m.name1} –∏ ${m.name2} - ${status}\n`;
        response += `   –î–∞—Ç–∞: ${moment(m.date).format('DD.MM.YYYY')}\n`;
        if (m.divorceDate) {
            response += `   –†–∞–∑–≤–æ–¥: ${moment(m.divorceDate).format('DD.MM.YYYY')}\n`;
        }
    });

    bot.sendMessage(chatId, response);
});

bot.onText(/–ú–æ–π –±—Ä–∞–∫/, (msg) => {
    const userId = msg.from.id;
    const chatId = msg.chat.id;
    const marriages = readMarriages(chatId);

    const marriage = marriages.find(m => (m.user1 === userId || m.user2 === userId) && m.status !== 'divorced');
    if (!marriage) {
        bot.sendMessage(chatId, "–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –±—Ä–∞–∫–µ.");
        return;
    }

    const spouseName = marriage.user1 === userId ? marriage.name2 : marriage.name1;
    const marriageDate = new Date(marriage.date);
    const now = new Date();
    const daysMarried = Math.floor((now - marriageDate) / (1000 * 60 * 60 * 24));
    const level = getMarriageLevel(daysMarried);

    let response = `–í–∞—à –±—Ä–∞–∫ —Å ${spouseName}:\n`;
    response += `–î–∞—Ç–∞ —Å–≤–∞–¥—å–±—ã: ${moment(marriageDate).format('DD.MM.YYYY')}\n`;
    response += `–î–Ω–µ–π –≤ –±—Ä–∞–∫–µ: ${daysMarried}\n`;
    response += `–£—Ä–æ–≤–µ–Ω—å: ${level}\n`;

    bot.sendMessage(chatId, response);
});

// BRUCKS SVO

bot.on('message', (msg) => {
	    const chatId = msg.chat.id;
	    const userWhoActed = msg.from.username || msg.from.first_name || '–ê–Ω–æ–Ω–∏–º';
	    const replyTo = msg.reply_to_message;

	    if (!replyTo) return;

	    const targetUser = replyTo.from.username;

	    if (!replyTo) return;
	    const actionText = msg.text.toLowerCase();

	    if (actionText.includes('–æ–±–Ω—è—Ç—å')) {
		            bot.sendMessage(chatId, `ü§ó ${userWhoActed} –æ–±–Ω—è–ª ${targetUser}!`);
		        } else if (actionText.includes('–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å')) {
				        bot.sendMessage(chatId, `üòò ${userWhoActed} –ø–æ—Ü–µ–ª–æ–≤–∞–ª ${targetUser}!`);
				    } else if (actionText.includes('–ø–æ–∂–∞—Ç—å —Ä—É–∫—É')) {
					            bot.sendMessage(chatId, `ü§ù ${userWhoActed} –ø–æ–∂–∞–ª —Ä—É–∫—É ${targetUser}!`);
					        } else if (actionText.includes('–ø–æ–∫–æ—Ä–º–∏—Ç—å')) {
							        bot.sendMessage(chatId, `üçΩÔ∏è ${userWhoActed} –ø–æ–∫–æ—Ä–º–∏–ª ${targetUser}!`);
							    } else if (actionText.includes('–ø–æ—Ç–µ—Ä–µ–±–∏—Ç—å –≤–æ–ª–æ—Å—ã')) {
								            bot.sendMessage(chatId, `üíÜ‚Äç‚ôÇÔ∏è ${userWhoActed} –ø–æ—Ç–µ—Ä–µ–±–∏–ª –≤–æ–ª–æ—Å—ã ${targetUser}!`);
								        } else if (actionText.includes('–ø—Ä–∏–ª–∞—Å–∫–∞—Ç—å')) {
										        bot.sendMessage(chatId, `üòä ${userWhoActed} –ø—Ä–∏–ª–∞—Å–∫–∞–ª ${targetUser}!`);
										    } else if (actionText.includes('—É—Å–ø–æ–∫–æ–∏—Ç—å')) {
											            bot.sendMessage(chatId, `ü´Ç ${userWhoActed} —É—Å–ø–æ–∫–æ–∏–ª ${targetUser}!`);
											        } else if (actionText.includes('–ø–æ–≥–ª–∞–¥–∏—Ç—å')) {
													        bot.sendMessage(chatId, `ü§ó ${userWhoActed} –ø–æ–≥–ª–∞–¥–∏–ª ${targetUser}!`);
													    } else if (actionText.includes('–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å –≤ –ª–æ–±')) {
														            bot.sendMessage(chatId, `üíã ${userWhoActed} –ø–æ—Ü–µ–ª–æ–≤–∞–ª ${targetUser} –≤ –ª–æ–±!`);
														        } else if (actionText.includes('–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å –≤ —â—ë–∫—É')) {
																        bot.sendMessage(chatId, `üòò ${userWhoActed} –ø–æ—Ü–µ–ª–æ–≤–∞–ª ${targetUser} –≤ —â—ë–∫—É!`);
																    } else if (actionText.includes('–ø–æ–≥–æ–Ω—è—Ç—å')) {
																	            bot.sendMessage(chatId, `üèÉ‚Äç‚ôÇÔ∏è ${userWhoActed} –ø–æ–≥–Ω–∞–ª ${targetUser}!`);
																	        } else if (actionText.includes('–ø–æ–∑–≤–∞—Ç—å')) {
																			        bot.sendMessage(chatId, `üìû ${userWhoActed} –ø–æ–∑–≤–∞–ª ${targetUser}!`);
																			    } else if (actionText.includes('—Å–¥–µ–ª–∞—Ç—å –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç')) {
																				            bot.sendMessage(chatId, `üíñ ${userWhoActed} —Å–¥–µ–ª–∞–ª –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç ${targetUser}!`);
																				        } else if (actionText.includes('–ø–æ–¥–∞—Ä–∏—Ç—å —Ü–≤–µ—Ç—ã')) {
																						        bot.sendMessage(chatId, `üíê ${userWhoActed} –ø–æ–¥–∞—Ä–∏–ª —Ü–≤–µ—Ç—ã ${targetUser}!`);
																						    } else if (actionText.includes('–ø–æ–≥–ª–∞–¥–∏—Ç—å –ø–æ –≥–æ–ª–æ–≤–µ')) {
																							            bot.sendMessage(chatId, `üß† ${userWhoActed} –ø–æ–≥–ª–∞–¥–∏–ª ${targetUser} –ø–æ –≥–æ–ª–æ–≤–µ!`);
																							        } else if (actionText.includes('–Ω–∞–∫–æ—Ä–º–∏—Ç—å')) {
																									        bot.sendMessage(chatId, `üçΩÔ∏è ${userWhoActed} –Ω–∞–∫–æ—Ä–º–∏–ª ${targetUser}!`);
																									    } else if (actionText.includes('–ø–æ–≥–ª–∞–¥–∏—Ç—å —Å–ø–∏–Ω—É')) {
																										            bot.sendMessage(chatId, `üíÜ‚Äç‚ôÄÔ∏è ${userWhoActed} –ø–æ–≥–ª–∞–¥–∏–ª —Å–ø–∏–Ω—É ${targetUser}!`);
																										        } else if (actionText.includes('–æ–±–Ω—è—Ç—å —Å–∑–∞–¥–∏')) {
																												        bot.sendMessage(chatId, `üôÜ‚Äç‚ôÇÔ∏è ${userWhoActed} –æ–±–Ω—è–ª ${targetUser} —Å–∑–∞–¥–∏!`);
																												    } else if (actionText.includes('–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å –≤ —à–µ—é')) {
																													            bot.sendMessage(chatId, `üíã ${userWhoActed} –ø–æ—Ü–µ–ª–æ–≤–∞–ª ${targetUser} –≤ —à–µ—é!`);
																													        } else if (actionText.includes('–ø—Ä–∏–∫–æ—Å–Ω—É—Ç—å—Å—è –∫ —â–µ–∫–µ')) {
																														      bot.sendMessage(chatId, `ü•∞ ${userWhoActed} –ø—Ä–∏–∫–æ—Å–Ω—É–ª—Å—è –∫ —â–µ–∫–µ ${targetUser}!`);
																														  } else if (actionText.includes('–≤—Å—Ç—Ä—è—Ö–Ω—É—Ç—å')) {
																														          bot.sendMessage(chatId, `üëê ${userWhoActed} –≤—Å—Ç—Ä—è—Ö–Ω—É–ª ${targetUser}!`);
																														      } else if (actionText.includes('–ø–æ–∑–∞–±–æ—Ç–∏—Ç—å—Å—è')) {
																														      bot.sendMessage(chatId, `üíù ${userWhoActed} –ø–æ–∑–∞–±–æ—Ç–∏–ª—Å—è –æ ${targetUser}!`);
																														  } else if (actionText.includes('–æ–±–Ω—è—Ç—å –∑–∞ —Ç–∞–ª–∏—é')) {
																														          bot.sendMessage(chatId, `üíÉ ${userWhoActed} –æ–±–Ω—è–ª ${targetUser} –∑–∞ —Ç–∞–ª–∏—é!`);
																														      } else if (actionText.includes('–ø–æ–∫–∞—á–∞—Ç—å –Ω–∞ —Ä—É–∫–∞—Ö')) {
																														      bot.sendMessage(chatId, `üí™ ${userWhoActed} –ø–æ–∫–∞—á–∞–ª ${targetUser} –Ω–∞ —Ä—É–∫–∞—Ö!`);
																														  } else if (actionText.includes('—Å–¥–µ–ª–∞—Ç—å –º–∞—Å—Å–∞–∂')) {
																														          bot.sendMessage(chatId, `üíÜ‚Äç‚ôÇÔ∏è ${userWhoActed} —Å–¥–µ–ª–∞–ª –º–∞—Å—Å–∞–∂ ${targetUser}!`);
																														      } else if (actionText.includes('–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å –≤ –ª–æ–±–∏–∫')) {
																														      bot.sendMessage(chatId, `üíã ${userWhoActed} –ø–æ—Ü–µ–ª–æ–≤–∞–ª ${targetUser} –≤ –ª–æ–±–∏–∫!`);
																														  } else if (actionText.includes('–ø–æ–∂–∞—Ç—å –ø–ª–µ—á–æ')) {
																														          bot.sendMessage(chatId, `üí™ ${userWhoActed} –ø–æ–∂–∞–ª –ø–ª–µ—á–æ ${targetUser}!`);
																														      }
});
